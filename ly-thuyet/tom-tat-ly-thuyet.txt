**********Tại sao phải kiểm thử phần mềm?**********

[7 NGUYÊN LÝ TRONG KIỂM THỬ PHẦN MỀM]

** 7 nguyên tắc/nguyên lý/phương châm/nguồn gốc căn bản của kiểm thử phần mềm:

	01. Kiểm thử để chứng minh sự hiện diện của lỗi (Testing shows presence of defects): để chứng minh phần mềm CÓ LỖI vì lỗi luôn tiềm ẩn chứ không phải để khẳng định rằng phần mềm này không có lỗi (bug-free). Vì vậy, cần thiết kế test case để tìm ra được càng nhiều lỗi càng tốt.

	02. Không thể kiểm thử hết toàn bộ (Exhaustive testing is not possible): trong phần mềm sẽ có rất nhiều chức năng, yêu cầu, loại kiểm thử,... được thực hiện trên nhiều môi trường, nền tảng, công nghệ... nên ta không bao giờ có thể kiểm thử hết được toàn bộ chứng năng của phần mềm, tất cả các kịch bản, đầu vào và đầu ra. Vì vậy, cần sử dụng những phương pháp phân tích rủi ro, độ ưu tiên,... để tập trung kiểm thử những chức năng chính, chức năng quan trọng, chức năng có nguy cơ lỗi cao trên những môi trường thường xuyên được sử dụng nhất.

		Ví dụ: kiểm thử website tiki.vn. Đại đa số là người Việt truy cập và mua hàng thông qua các trình duyệt Chrome, CốcCốc; chức năng mua hàng sẽ là chức năng cần được ưu tiên kiểm thử trước.

	03. Kiểm thử càng sớm càng tốt (Early testing): kiểm thử nên suất hiện càng sớm càng tốt trong tất cả các giao đoạn (6 pha, 6 công đoạn)/vòng đời của việc phát triển phần mềm, từ lúc thu thập những yêu cầu của khách hàng đến lúc phát triển và xây dựng hệ thống. Vì kiểm thử ở những giai đoạn đầu sẽ giúp sớm phát hiện bug, giúp giao đoạn chuyển giao hệ thống đúng thời hạn và chất lượng đúng như dự kiến.

	04. Lỗi thường được phân bố tập trung (Defect clustering): lỗi (bug) thường xuất hiện ở những chức năng chính, nơi nào xuất hiện nhiều lỗi thì khả năng cao những nơi gần đó cũng sẽ đang có rất nhiều lỗi. Quy luật 80/20 - Pareto: khoảng 80% kết quả là do 20% nguyên nhân gây ra (80% tổng số bug trong chương trình là do 20% chức năng quan trọng gây ra).

	05. Nghịch lý thuốc trừ sâu (Pesticide paradox): cùng một test case, kỹ thuật kiểm thử, nếu kiểm thử lặp lại nhiều lần (lặp lại bộ test case) sẽ khiến xác suất tìm ra lỗi thấp hơn, và nếu không tìm ra được lỗi thì nên đổi kỹ thuật kiểm thử, cải thiện test case. Nếu một tính năng mới được thêm vào thì nên kiểm thử hồi quy (regression testing) để đảm bảo rằng tính năng mới này không làm ảnh hưởng đến những tính năng vốn đã có của hệ thống.

	06. Kiểm thử theo ngữ cảnh độc lập (Testing is context dependent): tuỳ theo ngữ cảnh mà kiểm thử, chỉ tập trung kiểm thử ở những chức năng được yêu cầu.

		Ví dụ: khi kiểm thử phần mềm máy tính cầm tay, nếu đối tượng sử dụng là học sinh cấp 1 thì chỉ nên tập trung kiểm thử những chức năng tính toán công, trừ, nhân, chia.

	07. Quan niệm sai lầm về việc hết lỗi/không còn lỗi (Absence of errors fallacy): vì bản chất của phần mềm là luôn luôn có lỗi nên chớ vội mừng và phát hành phần mềm khi không tìm thấy lỗi trong phần mềm, vì có thể là do kiểm thử viên kiểm thử chưa tới, kịch bản và bộ test case chưa thật sự tốt. Lúc này, cần áp dụng thêm nhiều kỹ thuật kiểm thử để tìm lỗi.

================================================================================

[CÁC BƯỚC CẦN THỰC HIỆN TRONG MỘT DỰ ÁN]

** Những bước mà kiểm thử viên cần thực hiện trong một dự án thực tế:

	Bước 01: Hiểu về dự án (đặt câu hỏi, trao đổi với khách hàng, lãnh đạo và thành viên trong nhóm).
	Bước 02: Thiết lập kế hoạch/chiến lược kiểm thử (test plan).
	Bước 03: Thiết lập các kịch bản kiểm thử (test scenarios, độ ưu tiên,...).
	Bước 04: Thiết lập các tình huống kiểm thử (test cases).
	Bước 05: Thực thi kiểm thử.
	Bước 06: Báo cáo kết quả kiểm thử chính thức.

================================================================================

** Các loại lỗi và các dạng kỹ thuật kiểm thử:

Lỗi trên website:
	- Lỗi về thiết kế, bố cục, giao diện:
		+ Sắp xếp không đúng trật tự, không cân đối (misalignment).
		+ Các nút bấm đè lên nhau, che khuất nhau (overlapping).
		+ Thiếu nội dung và hình ảnh (missing contents/images).
		+ Font chữ.
		+ Màu sắc.
	- Lỗi chức năng (functional testing): khi khách hàng yêu cầu một chức năng nào đó mà phần mềm không thực hiện đúng theo yêu cầu. Áp dụng kiểm thử hộp đen, hộp trắng và hộp xám để sửa lỗi này.
		Ví dụ: người dùng nhấn vào nút [Đăng ký] nhưng không thể đăng ký, hoặc đăng ký xong nhưng không thể đăng nhập,...

	- Kiểm thử tương thích (compatibility testing): tương thích về phần cứng, phần mềm, hệ điều hành, hệ thống mạng, trình duyệt, thiết bị, phiên bản,...
		Ví dụ: phần mềm có cho ra cùng một kết quả trong các trình duyệt khác nhau trên cùng một hệ điều hành,... 

	- Kiểm thử địa phương hoá (localization testing):
		+ Ngôn ngữ.
		+ Đơn vị tiền tệ.
		+ Định dạng ngày tháng năm.

	- Kiểm thử hiệu năng (performance testing): đảm bảo các tiêu chí về tốc độ, khả năng đáp ứng/phản hồi/tương thích, độ ổn định và khả năng mở rộng.

	- Kiểm thử về trải nghiệm người dùng (usability testing): có dễ dùng hay gây rối mắt, khó hiểu; nếu là website bán hàng thì việc thanh toán có dễ dàng hay không, hiện thông báo lỗi nhưng không cụ thể khiến người dùng không biết mình bị sai ở đâu; các nút bấm thiết kế quá nhỏ khiến cho những thiết bị với màn hình nhỏ khó thao tác.

	- Kiểm thử bảo mật (security testing): 

================================================================================

[PHÂN LOẠI KIỂM THỬ]

1. Cấp độ kiểm thử (Testing Level):

Bàn về các công việc kiểm thử cần phải làm dựa vào sự hoàn thiện của hệ thống trong quá trình viết code.

--------------------

Có 4 mức hoàn thiện của hệ thống, tương ứng với 4 giai đoạn/công đoạn/mức độ:

	* Unit Test: dev sẽ tiến hành viết code, tự thực hiện thêm các hoạt động đảm bảo chất lượng code bằng cách kiểm thử ngay các hàm/lớp được tạo ra.

	* Integration Test:

	* System Test:

	* User Acceptance Test (UAT):

-----------------------------------------------------------------

2. Loại kiểm thử (Testing Type):

-----------------------------------------------------------------

3. Kỹ thuật kiểm thử (Testing Technique):

================================================================================

[PHÂN BIỆT GIỮA KIỂM THỬ ỔN ĐỊNH (SMOKE TESTING) VÀ KIỂM THỬ HỢP LÝ (SANITY TESTING)]

** Software build là gì?
Nếu phát triển một chương trình máy tính đơn giản chỉ bao gồm một tệp mã nguồn, ta chỉ cần biên dịch và liên kết một tệp này, để tạo thành một tệp thực thi.

Một dự án phần mềm thực tế được chia thành nhiều thành phần, được thực hiện bởi nhiều thành viên và ra cho rất nhiều tập tin. Lead developer sẽ sử dụng phần mềm nhằm gom và kết nối những thành phần lại với nhau để cho ra hệ thống hoàn chỉnh.

--------------------

** Kiểm thử ổn định (Smoke Testing) - kiểm thử xác minh (verification) bản build.
Là loại kiểm thử phần mềm được thực hiện sau khi build để xác minh rằng các chức năng, thành phần quan trọng nhất của chương trình đang hoạt động tốt (không phải toàn hệ thống - exhaustive testing). Kiểm thử viên sẽ thực hiện kiểm thử ngay trên chính bản build đó. Thường được thực hiện trước kiểm thử chức năng hoặc kiểm thử hồi quy, mục đích là để từ chối một ứng dụng bị hỏng nặng, vì vậy mà nhóm QA sẽ không mất nhiều thời gian cài đặt và thử nghiệm ứng dụng phần mềm.
	Ví dụ 1: xác minh rằng ứng dụng khởi động thành công, giao diện được đáp ứng và phù hợp trên tất cả các thiết bị, mọi độ phân giải màn hình.
	Ví dụ 2: mỗi ngày, khi có bản build mới sẽ lấy khoảng 10 Test Case ra để chạy, nếu cả 10 Test Case này đều pass thì bản build đó cũng sẽ pass.

--------------------

** Kiểm thử hợp lý (Sanity Testing) - kiểm thử xác minh (verification) tính năng mới và lỗi đã được sửa trong bản build.
Là loại kiểm thử phần mềm được thực hiện sau khi nhận được bản build với những thay đổi nhỏ về code hoặc chức năng để xác định rằng những lỗi cũ đã được sửa và trong quá trình thay đổi chức năng không gây ra, phát sinh thêm bất kỳ lỗi mới nào. Dùng để xác định rằng bản build hoạt động đúng như mong đợi, mục tiêu không phải để xác minh kỹ lưỡng chức năng mới mà để xác định rằng nhà phát triển đã áp dụng một số tính hợp lý (sanity) trong khi sản xuất phần mềm. Nếu kiểm tra tính hợp lý không thành công, bản build sẽ bị từ chối để tiết kiệm thời gian và chi phí liên quan đến một thử nghiệm nghiêm ngặt hơn.
	Ví dụ: nếu máy tính bỏ túi cho ra kết quả của một phép tính đơn giản là 2 + 2 = 5! thì không cần phải tốn công để kiểm thử các hàm nâng cao như sin 30 + cos 50.

			*********SỰ KHÁC BIỆT CHÍNH*********

---------------------------------------------------------------------------------
|Kiểm thử ổn định (Smoke Testing)	|Kiểm thử hợp lý (Sanity Testing)	|
|---------------------------------------|---------------------------------------|
|Mục tiêu để xác minh "tính ổn định"	|Mục tiêu để xác minh "tính hợp lý"	|
|---------------------------------------|---------------------------------------|
|Chắc chắn rằng các chức năng quan trọng|Kiểm tra chức năng mới/lỗi đã được sửa	|
|của chương trình đang hoạt động tốt	|					|
|---------------------------------------|---------------------------------------|
|Được thực hiển bởi lập trình viên và	|Được thực hiển bởi kiểm thử viên	|
|kiểm thử viên				|					|
|---------------------------------------|---------------------------------------|
|Xác minh các chức năng quan trọng của	|Xác minh chức năng mới, ví dụ: sửa lỗi	|
|hệ thống				|					|
|---------------------------------------|---------------------------------------|
|Là một tập con của thử nghiệm chấp nhận|Là một tập con của kiểm thử hồi quy	|
|(acceptance testing)			|(regression testing)			|
|---------------------------------------|---------------------------------------|
|Thường có tài liệu và kịch bản		|Thường không có tài liệu và kịch bản	|
|---------------------------------------|---------------------------------------|
|Xác minh toàn bộ hệ thống từ đầu đến	|Xác minh một thành phần cụ thể	của toàn|
|cuối					|bộ hệ thống				|
|---------------------------------------|---------------------------------------|
|Giống như Kiểm tra sức khỏe tổng quát	|Giống như Kiểm tra sức khỏe chuyên biệt|
---------------------------------------------------------------------------------

================================================================================

[KIỂM THỬ API - API TESTING]

** Kiểm thử API (API Testing):

Ví dụ: các bước để thay đổi mật khẩu.
	01. User vào phần "Profile" để thay đổi mật khẩu.
	02. User nhấn vào nút "Update".
	03. API sẽ chịu trách nhiệm là gửi thông tin mật khẩu cũ và thông tin mật khẩu mới đó về Server.
	04. Server sẽ đọc thông tin và kiểm tra.
	05. Nếu tất cả mọi thứ đều ổn thì Server sẽ tiến hành cập nhật mật khẩu mới.
	06. Server sẽ trả phản hồi về cho Client và thông báo rằng đã cập nhật thành công.
	07. Cuối cùng là User sẽ nhìn thấy mật khẩu đã được cập nhật thành công.

Các bước 4, 5 và 6 được gọi là Syntax Testing và Functional Testing.

================================================================================

[KIỂM THỬ TỰ ĐỘNG - AUTOMATION TESTING]

** Kiểm thử phần mềm tự động (Test Automation):
Là quá trình con người sử dụng công cụ để tự động hoá quá trình kiểm thử phần mềm. Đôi khi sẽ có những kịch bản kiểm thử thủ công lặp lại nhiều lần đến mức gây nhàm chán, tốn thời gian và chi phí nếu kiểm thử thủ công. Lúc này, cần có sự hỗ trợ của công cụ để tự động hoá quá trình kiểm thử.


















