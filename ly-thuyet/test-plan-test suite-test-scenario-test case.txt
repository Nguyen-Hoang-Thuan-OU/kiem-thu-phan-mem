**********Test Plan, Test Suite, Test Scenario, Test Case**********

================================================================================

** Chiến lược/kế hoạch kiểm thử (Test Plan): tài liệu tổng quan về việc kiểm thử một dự án, là dạng tài liệu ở mức thường cao do các test manager/test leader phát triển, bao gồm: phạm vi (scope), hướng tiếp cận, quy trình kiểm thử (Software Testing Life Cycle - STLC), tài nguyên, nhân lực, các tính năng cần và không cần kiểm thử, các công cụ và môi trường kiểm thử cần có.
	=> Tài liệu định nghĩa ra mục tiêu kiểm thử của dự án và phương tiện/phương pháp để đạt được, xác định nổ lực và chi phí kiểm thử.

--------------------

** Các bước để xây dựng Test Plan:

	* Bước 01: Định nghĩa phạm vi của kiểm thử (Define scope of testing): những thành phần trong hệ thống, phần cứng, phần mềm, phần mềm trung gian được sử dụng trong hệ thống được gọi là in-scope; các thành phần của hệ thống sẽ không được kiểm thử được gọi là out-of-scope. Là bước vô cùng quan trọng đối với tất cả các bên liên quan trong hệ thống, cung cấp sự chắc chắn và thông tin chính xác về hoạt động kiểm thử đang dự định thực hiện, tất cả các thành viên trong dự án sẽ hiểu rõ những gì được và không được kiểm thử trong dự án.

		- Để xác định được phạm vi:
			+ Nắm rõ, chính xác được yêu cầu của khách hàng (precise customer requirement).
			+ Xác định được ngân sách của dự án (project budget).
			+ Nắm được những đặc điểm kỹ thuật của sản phẩm (product specification).
			+ Nắm được kỹ năng và trình độ kiểm thử của từng thành viên trong nhóm kiểm thử (skill & talent of test team).

	* Bước 02: Xác định loại kiểm thử (Identify testing type): dùng để xác định mỗi loại kiểm thử cụ thể, thứ tự ưu tiên của từng loại so với nhân lực và trình độ kiểm thử của nhóm, nhằm một mục tiêu chung là phát hiện sớm lỗi trước khi phát hành sản phẩm và tiết kiệm chi phí.

		- Kiểm thử đơn vị (Unit test): một unit là một đơn vị/thành phần nhỏ nhất mà ta có thể kiểm thử được. Thường do người lập trình viên thực hiện kiểm thử đầu tiên vì họ là người viết ra nó.

		- Kiểm thử API (API testing): API là cầu nối chuyển giao thông tin giữa Client với Server, không thực hiện bất kỳ hành động nghiệp vụ (business logic) nào.

		- Kiểm thử tích hợp (Integration test): kiểm thử tích hợp một nhóm mô-đun, chức năng riêng lẻ lại với nhau, được thực hiển bởi những kiểm thử viên.

		- Kiểm thử hệ thống (System test): kiểm tra một sản phẩm đã hoàn chỉnh và tích hợp đầy đủ (toàn bộ hệ thống), nếu ổn định thì hệ thống sẽ được chuyển giao cho khách hàng. Được thực hiện sau khi đã kiểm thử đơn vị (unit test) và kiểm thử tích hợp (integration test).

		- Kiểm thử cài đặt/gỡ bỏ cài đặt (Install/UnInstall testing):
			- Kiểm thử cài đặt: xác minh phần mềm đã được cài đặt với tất cả các thành phần cần thiết và các ứng dụng đang hoạt động như mong đợi.
			- Kiểm thử gỡ bỏ cài đặt: được thực hiện để xác minh liệu rằng tất cả các thành phần của ứng dụng có bị loại bỏ trong quá trình hay không. Tất cả các tập tin liên quan đến ứng dụng cùng cấu trúc thư mục của nó phải được gỡ bỏ sau khi quá trình gỡ bỏ thành công.

		- Kiểm thử Agile (Agile testing): là phương pháp kiểm thử phần mềm tuân theo một số quy tắc của bản tuyên ngôn (manifesto) agile, xem việc phát triển phần mềm như là khách hàng của việc kiểm thử.

		- Kiểm thử chấp nhận (Acceptance testing): khách hàng (hoặc ủy quyền cho một nhóm thứ ba) thực hiện nhằm mục đích chứng minh phần mềm thỏa mãn tất cả yêu cầu của khách hàng và khách hàng chấp nhận sản phẩm.
			- Alpha test:
			- Beta test: 

	* Bước 03: Tạo và lưu trữ tài liệu về những vấn đề và hướng giải quyết (Document risk & issue): các test manager/test leader cần phải tính toán được vấn đề, rủi ro tiềm ẩn trong phần mềm và hướng giải quyết.

		- Vấn đề 1: Thành viên trong nhóm thiếu các kỹ năng cần thiết để kiểm thử trang web.
			-> Giải pháp: Lập kế hoạch khoá đài tạo để nâng cao kỹ năng của các thành viên.
		- Vấn đề 2: Tiến độ dự án quá eo hẹp, thật khó để hoàn thành dự án đúng hạn.
			-> Giải pháp: Đặt mức độ ưu tiên cho từng hoạt động kiểm thử (test priority).
		- Vấn đề 3: Test manager có kỹ năng quản lý kém.
			-> Giải pháp: Lập kế hoạch đào tạo cho quản lý.
		- Vấn đề 4: Thiếu hợp tác, ảnh hưởng tiêu cực đến năng suất của thành viên.
			-> Giải pháp: Khuyến khích mỗi thành viên trong nhóm thực hiện nhiệm vụ của mình và truyền cảm hứng cho họ để họ nỗ lực nhiều hơn.
		- Vấn đề 5: Dự toán ngân sách sai và vượt chi phí.
			-> Giải pháp: Thiết lập phạm vi trước khi bắt đầu công việc, chú ý nhiều đến việc lập kế hoạch dự án, liên tục theo dõi và đo lường tiến độ.

	* Bước 04: Xác định thành viên thực hiện và thời điểm thực hiện kiểm thử (Create test logistic):
		- Xác định thành viên: ước tính ngân sách của dự án và lựa chọn thành viên dựa theo khả năng của từng thành viên có phù hợp với công việc (khả năng hiểu yêu cầu và quan điểm của khách hàng, mong muốn chất lượng tốt, chú ý đến từng chi tiết nhỏ, có tinh thần hợp tác nhóm tốt.)

		- Xác định thời điểm: cần kết hợp với các hoạt động khác, bắt đầu kiểm thử khi đã có: tài liệu đặc tả yêu cầu, nguồn nhân lực và môi trường kiểm thử.

================================================================================

** Kịch bản kiểm thử (Test Scenario): được lập sau khi nhận được yêu cầu/tài liệu kiểm thử (test document) từ phía khách hàng để xác định ra những chức năng cần kiểm thử. Mỗi chức năng/yêu cầu sẽ tương ứng với một kịch bản (scenario) mà trong mỗi kịch bản sẽ có nhiều tình huống (case) khác nhau. Một Test Scenario có thể bao gồm nhiều Test Scenario nhỏ hơn bên trong.
	=> Là một kịch bản chứa nhiều Test Case có liên quan đến kịch bản đó (chỉ nêu mục đích chứ không nêu các bước kiểm thử).

	Ví dụ: Kịch bản kiểm thử (Test Scenario) chỉ nêu mục đích
		- Kiểm tra chức năng đăng nhập.
		- Kiểm tra chức năng tìm kiếm.
		- Kiểm tra chức năng thanh toán.
		- Xác minh tính năng khôi phục.
		- Xác minh tính năng huỷ đăng nhập.

---------------------------------------------------------------------------------
|Tên mô-đun/	|ID của kịch bản|Tên của kịch		|Số lượng tình huống	|
|ID của yêu cầu	|kiểm thử	|bản kiểm thử		|kiểm thử (Test Cases)	|
|---------------|---------------|-----------------------|-----------------------|
|Mô-đun		|TS_Login001	|Kiểm tra tính năng	|	4		|
|đăng nhập	|		|đăng nhập		|			|
|---------------|---------------|-----------------------|-----------------------|
|Mô-đun		|TS_Login002	|Xác minh tính năng	|	2		|
|đăng nhập	|		|khôi phục		|			|
|---------------|---------------|-----------------------|-----------------------|
|Mô-đun		|TS_Login003	|Xác minh tính năng huỷ	|	2		|
|đăng nhập	|		|đăng nhập		|			|
---------------------------------------------------------------------------------

================================================================================

** Tình huống kiểm thử (Test Case):

Là một dạng tài liệu tập hợp lại, ghi chép lại những tình huống sử dụng/kiểm thử theo dạng từng bước cụ thể liên tiếp nhau (step by step) đi kèm với dữ liệu kiểm thử (test data), điều kiện tiên quyết (precondition) và hậu điều kiện (postcondition) để kiểm tra tính đúng đắn về hành vi (behavior) và chức năng (functionality) của một hệ thống.

Những tình huống kiểm thử này được thực thi để tìm ra lỗi cho một kịch bản kiểm thử (Test Scenario), với mục đích kiểm tra/xác minh (verify) tính năng cụ thể của hệ thống đúng hay sai (so với yêu cầu, xử lý kết quả), kết quả trả về là pass hay failed.
	=> Tập hợp các dữ liệu đầu vào, các điều kiện tiên quyết, các kết quả mong đợi và các điều kiện kết thúc; giúp tìm ra lỗi trong các yêu cầu hoặc thiết kế của ứng dụng, so sánh kết quả mong đợi với kết quả thực tế để xác định xem hệ thống có hoạt động theo yêu cầu của khách hàng hay không.

Cần đảm bảo Test Case đã bao gồm hết tất cả các tình huống vì một chức năng có thể có nhiều tình huống xảy ra (thành công, thất bại do vô ý và thất bại trong nhiều lần do cố tình phá) để chứng minh rằng tính năng hoạt động đúng như mô tả và thiết kế.

	Ví dụ 1: Trong Test Scenario - Kiểm tra chức năng đăng nhập
		01. Kiểm tra phản hồi của hệ thống khi nhập tài khoản và mật khẩu hợp lệ.
		02. Kiểm tra phản hồi của hệ thống khi nhập tài khoản và mật khẩu không hợp lệ.
		03. Kiểm tra phản hồi của hệ thống khi nhập tài khoản hợp lệ nhưng mật khẩu không hợp lệ.
		04. Kiểm tra phản hồi của hệ thống khi nhập tài khoản không hợp lệ nhưng mật khẩu hợp lệ.
		05. Kiểm tra phản hồi của hệ thống khi nhấn nút [Đăng nhập] nhưng bỏ trống/không nhập nhập tài khoản và mật khẩu.
		06. Kiểm tra phản hồi của hệ thống khi nhấn nút [Duy trì trạng thái đăng nhập].
		07. Kiểm tra xem tính năng [Quên mật khẩu] có hoạt động đúng như mong đợi.

	Ví dụ 2: Trong Test Scenario - Kiểm tra chức năng gửi email.
		01. Kiểm tra phản ứng của nút [Gửi] khi không nhập địa chỉ email.
		02. Kiểm tra phản ứng của nút [Gửi] khi không nhập tiêu đề email.
		03. Kiểm tra phản ứng của nút [Gửi] khi địa chỉ email không có thật/không tồn tại trên Server.

--------------------

** Vậy cần bao nhiêu test case thì đủ cho một Test Scenario?
Trong số bảy nguyên lý kiểm thử phần mềm, có một nguyên lý nói "Không thể kiểm thử hết toàn bộ (Exhaustive testing is not possible)". Vì vậy, cần phải có cách để dừng việc viết test case mà vẫn tự tin kết luận rằng hệ thống có thể sử dụng ổn định.

-> Áp dụng thêm những kỹ thuật thiết kế test case (hộp trắng, hộp đen, hộp xám, kinh nghiệm,...) để tăng tính hiệu quả bằng cách giới hạn số test case phải viết nhưng vẫn đảm bảo thử qua tất cả các trường hợp cần phải thử.

================================================================================

* Cấu trúc cần có của một Test Case:
	//Thiết kế Test Case - Do QC thực hiện, kết quả sau đó sẽ được lưu trữ trên excel, word,...//
		- ID định danh của Test Case.
		- Tên/tiêu đề Test Case.
		- Mô tả/tóm tắt Test Case.
		- Các điều kiện tiên quyết (preconditions).
		- Đầu vào: các bước/quy trình kiểm thử cụ thể (test steps/test procedures) để xác minh tính năng đúng hay sai.
		- Đầu ra mong đợi (Expected Result): kỳ vọng kết quả nhận được nếu thực hiện theo đúng các bước ở trên.

	//Thực thi/chạy Test Case - Do chính QC đã thiết kế ra hoặc QC khác thực hiện để kiểm chứng tính năng, so sánh kết quả mong đợi (expected) với thực tế (actual) được miêu tả trong Test Case//
		- Đầu ra thực tế (Actual Result): kết quả thực tế sẽ nhận được khi thực hiện theo đúng các bước ở trên.
		- Trạng thái/kết quả kiểm thử (status/test result) so với kết quả mong đợi: PASS hoặc FAIL.

* Tuỳ chọn: có thể có hoặc không, ví dụ: tính năng [Quên mật khẩu] không cần có dữ liệu kiểm thử.
	- Kịch bản kiểm thử (Test Scenario)
	- Độ ưu tiên (từ 0 -> 4 hoặc Low, Medium, High, Critical).
	- Bộ dữ liệu chuẩn bị cho việc kiểm thử.
	- Các tham số kiểm thử.
	- Loại tình huống kiểm thử.
	- Có đủ điều kiện để kiểm thử tự động.
	- Các trạng thái khác ngoài pass và fail (chưa thực thi, bị ngưng,...).
	- Kết quả trả về thực tế.
	- Ghi chú/bình luận.
	- Thông tin môi trường kiểm thử.
	- Ngày thực hiện kiểm thử.
	- Phiên bản của hệ thống/website.
	- Thiết bị.
	- ID của lỗi (bug).

|Số định danh/ID Test Case| |Tên Test Case| |Điều kiện tiên quyết| |Các bước thực hiện kiểm thử| |Dữ liệu kiểm thử| |Kết quả mong muốn| |Kết quả thực thế|

	Ví dụ:
		- Số định danh/ID Test Case: TC_Login001
		- Tên Test Case: Kiểm tra tính năng đăng nhập
		- Điều kiện tiên quyết: truy cập thành công vào website
		- Các bước thực hiện kiểm thử:
					01. Truy cập vào trang chủ
					02. Nhấn vào menu [Tài khoản của tôi]
					03. Chọn tính năng [Đăng nhập]
					04. Nhập tài khoản và mật khẩu hợp lệ
					05. Nhấn nút [Đăng nhập]
		- Dữ liệu kiểm thử:
					Tài khoản: a@a.com
					Mật khẩu: Abc!@#456
		- Kết quả mong muốn: Người dùng có thể đăng nhập vào hệ thống
		- Kết quả thực thế: Hiện thông báo đăng nhập không thành công

--------------------

** Kỹ năng viết đặc tả Test Case (tài liệu đặc tả tình huống kiểm thử):

	- Đặt tên, định danh Test Case: đặt làm sao mà khi đọc tên là biết ý đồ của Test Case, đặt tên Test Case theo mô-đun, theo chức năng kiểm thử.
		Ví dụ: TC_Register, TC_Login.

	- Mô tả Test Case: nên có mô tả song song với các bước thực hiện kiểm thử (test step) để giải thích tóm tắt Test Case sẽ làm những công việc gì.
		Ví dụ 1: kiểm tra sự phản hồi khi nhập email và mật khẩu không hợp lệ.
		Ví dụ 2: đến trang chủ, nhập dữ liệu và nhấn nút.

	- Tránh lặp lại Test Case: kiểm tra xem những Test Case đó đã từng có trong hệ thống hay chưa, nếu có thì nên dùng lại, cập nhật và cải tiến hơn là viết lại từ đầu.

	- Tránh đoán mò: dựa vào đặc tả mà viết.

	- Thường xuyên cập nhật Test Case: nên cập nhật lại Test Case mỗi khi hệ thống có cập nhật, thay đổi, nâng cấp.

	- Đánh giá chéo: các kiểm thử viên kiểm thử chéo cho nhau.

================================================================================

Để quản lý được Test Case, ta có thể sử dụng Excel, Word. Nhưng nếu số lượng Test Case quá nhiều, song song với đó là quản lý việc kiểm thử và kết quả kiểm thử, các lần kiểm thử khác nhau,... thì các công cụ truyền thống sẽ dần bộc lộ hạn chế.

Lúc này, cần phải sử dụng thêm các phần mềm chuyên dụng cho việc quản lý, lưu trữ các Test Case, kết quả kiểm thử, các lần kiểm thử, biểu đồ, quản lý nhóm và phân chia công việc.

Các phần mềm để quản lý các Test Case: TestRail, TestMonitor...

================================================================================

** Bộ kiểm thử/Bộ xác nhận (Test Suite/Validation Suite): tập hợp của các Test Case cho một mục đích nhất định. Trong kiểm thử tự động, nó có thể có nghĩa là một tập hợp các kịch bản kiểm thử tự động (Test Script) sẽ được thực thi trong cùng một lần kiểm thử cụ thể.

Các Test Case và Test Script trong Test Suite đều được sắp xếp theo thứ tự. Ví dụ: Test Case [Đăng ký] sẽ được đặt ở trước Test Case [Đăng nhập].

Bản chất của Test Suite là mô tả thật rõ ràng mục tiêu và đích đến của các trường hợp kiểm thử (Test Case). Khi có hàng nghìn Test Case, sử dụng Test Suite sẽ giúp phân loại các Test Case theo từng tình huống kiểm thử khác nhau, chẳng hạn như kiểm thử chức năng hoặc cho các tính năng riêng biệt của phần mềm.

Ngoài ra, Test Suite cũng có các bước khác nhau, có thể sử dụng để xác định các bước hiện tại của quá trình kiểm thử, như đã kích hoạt, đang trong tiến trình hoặc đã hoàn thành.

	Ví dụ 1: Regression Test Suite được chạy để xác minh những tính năng cũ.
	Ví dụ 2: Test Suite cho những tính năng quan trọng nhất của hệ thống.
	Ví dụ 3: Test Suite dành riêng cho từng dạng (type) kiểm thử như Smoke Test Suite or Security Test Suite,...

	Ví dụ 4: Test Suite - Mua một sản phẩm
			Test Case 1: Đăng nhập
			Test Case 2: Thêm sản phẩm vào giỏ hàng
			Test Case 3: Thanh toán
			Test Case 4: Đăng xuất
	(Mỗi Test Case ở trên đều phụ thuộc vào sự thành công của các Test Case trước đó. Ví dụ: không thể thanh toán nếu không thể thêm sản phẩm vào giỏ hàng. Do đó, nếu đang chạy bộ Test Suite ở chế độ tuần tự, ta có thể chọn dừng việc thực thi bộ Test Suite nếu một trường hợp thử nghiệm duy nhất không vượt qua

================================================================================

Test condition: các trạng thái dữ liệu, ví dụ: không có tài khoản, mật khẩu

================================================================================

Khi đã có hệ thống rồi, ta sẽ không còn kiểm thử ở các cấp độ (level, mức hoàn thiện của hệ thống) mà chuyển sang dạng (type) kiểm thử chức năng để xem các chức năng có chạy đúng hay không.
	- Functional testing: 
	- Non-functional testing: 

================================================================================

Sau thiết kế Test Case là giai đoạn thực thi/chạy Test Case, giai đoạn này có thể do chính QC đã thiết kế ra Test Case hoặc giao cho một QC khác thực hiện theo những bước đã được mô tả trong Test Case để lấy được kết quả thực tế (actual result), từ đó so sánh kết quả thực tế (actual result) với kết quả mong đợi (expected result), mục đích là để xác minh tính năng chạy đúng hay sai.

Có hai cách để thực thi test case:

	* Kiểm thử thủ công (Manual Testing): tự tay (thủ công) mở hệ thống lên, làm theo các bước đã được mô tả trong test case, dùng mắt thường để nhìn kết quả và tự kết luận đúng hay sai so với kết quả mong đợi được viết trong test case.
		-> Dùng sức người để thực thi và kiểm tra hệ thống.

	* Kiểm thử tự động (Automation/Automated Testing): con người sử dụng các công cụ, các thư viện để thiết kế code/kịch bản kiểm thử tự động (Test Script), nhằm mục đích nhờ máy tính tự động hoá việc thực thi các test case (tự động mở, nhập dữ liệu, nhấn nút, xem kết quả, tự so sánh và báo kết quả đúng sai). Cách này hiệu quả trong việc kiểm thử hồi quy (Regression Testing).
		-> Con người viết code để máy tính giả lập lại các hành động và thay con người kiểm thử hệ thống và kết luận.

--------------------

Lỗi (Bug/Defect) xảy ra rong quá trình QC thực thi/chạy Test Case, khi hệ thống hoạt động không được như dự kiến: kết quả thực tế (actual result) khác với kết quả mong đợi (expected result), xuất hiện ngoại lệ, null,... -> Test Case Fail

Lúc này, QC sẽ ghi lại các thao tác/các bước để làm sao xảy ra được lỗi và có thể chụp lại màn hình để làm bằng chứng, sau đó lưu lại vào một công cụ riêng chuyên được dùng để quản lý lỗi như Bugzilla, hoặc lưu vào các công cụ quản lý dự án/quản lý các yêu cầu có kết hợp quản lý bug như Jira. Các công cụ thường này có liên thông với nhau bằng cách chuyển đổi thông tin qua lại nhờ API.

	-> Lưu lại những "bằng chứng" này lên một nơi được gọi là Bug Database, Bug Tracker, thuật ngữ trong nghề gọi là "Log Bug".

Lập trình viên sẽ đọc mô tả về lỗi, tự tái hiện/dựng lại lỗi (Re-produce Bug) để xác nhận hoặc loại bỏ (reject) -> Quá trình fix bug bắt đầu.

================================================================================









