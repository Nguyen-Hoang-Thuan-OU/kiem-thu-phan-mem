[KHÁI NIỆM KIỂM THỬ TĨNH - STATIC TESTING]

** Kiểm thử tĩnh (Static Testing): thường dành cho các chuyên gia với nhiều năm kinh nghiệm trong lĩnh vực kiểm thử. Họ sẽ đánh giá sản phẩm trong giai đoạn tài liệu hoá (agile: product backlog) để bước đầu phát hiện ra các lỗi tiềm ẩn, đánh giá nghiệp vụ có phù hợp với thực tế, phương pháp tiếp cận có vấn đề,... mà không cần phải thực thi mã nguồn chương trình. Từ đó đưa ra được những cảnh báo từ sớm về những điểm đáng nghi ngờ trong mã nguồn hoặc trong thiết kế; giúp tăng khả năng bảo trì mã nguồn và các thiết kế của phần mềm, tránh được những rủi ro trong công đoạn phát triển.

=> Kiểm thử (phân tích và đánh giá) khi chưa có sản phẩm.

-------------------------------------------------

[PHÂN LOẠI KIỂM THỬ TĨNH]

** Hai kỹ thuật được sử dụng thường xuyên trong kiểm thử tĩnh là đánh giá (Review) và phân tích tĩnh (Static Analysis):

	- Kỹ thuật đánh giá (Review): cùng thảo luận để tìm và gỡ bỏ các lỗi, những điều chưa rõ trong các tài liệu trước khi chúng được sử dụng trong quy trình phát triển. Kỹ thuật review kiểm thử bất cứ thứ gì được tài liệu hoá như: đặc tả yêu cầu, sơ đồ thiết kế hệ thống, mã nguồn, kế hoạch kiểm thử, các Test Case.
		-> Tham khảo ý kiến của các chuyên gia.

-------------------

	* Thành phần tham gia:
		- Người quản lý (Manager): quyết định xem có cần phải đánh giá hay không.
		- Người điều hành: xác định những loại tài liệu cần nghiên cứu trong quá trình đánh giá.
		- Người đánh giá (Reviewer): người đưa ra các đánh giá dựa trên sự hiểu biết và kinh nghiệm.
		- Người phụ trách chức năng/mô hình: giới thiệu cho mọi người về chức năng/mô hình mà mình sắp phát triển.
		- Thư ký: ghi chép lại những hoạt động/vấn đề trong buổi đánh giá.

-------------------

	* Các loại review:
		- Formal review (chính quy): được thực hiện theo quy trình chính thức, có kế hoạch (6 bước/công đoạn); cần phải ghi lại tài liệu và biên bản.
			+ Inspectation: người quản lý và điều hành dự án sẽ đưa ra các kịch bản và bộ quy tắc để đánh giá cho từng giai đoạn, các tài liệu phát triển phần mềm để các bên có liên quan cùng đánh giá.
			+ Technical Review: người có đầy đủ chuyên môn đưa ra các phân tích, quyết định cho một vấn đề nào đó. Những người đánh giá (reviewer) có thể đánh giá chéo cho nhau.

		- Informal review (không chính quy): khi thực hiện không xác định trước các bước, quy trình thực hiện; không cần phải ghi lại tài liệu hay biên bản.
			+ Walkthrought: nội bộ nhóm họp, người phụ trách chức năng đó sẽ giải thích cho mọi người về tính năng và bắt đầu thu thập ý kiến.
			+ Informal: không đi theo các công đoạn đánh giá.

-------------------

	* Các công đoạn review:
		- Planning: người phụ trách chức năng/mô hình sẽ lên kế hoạch, mời những ai có đủ nhiệm vụ tham gia buổi đánh giá.
		- Kick-off: bắt đầu thực hiện đánh giá.
		- Preparation: chuẩn bị tài liệu cho những người đánh giá (reviewer) đọc và tự tiến hành đánh giá trên tài liệu trước khi bắt đầu một cuộc họp chính quy.
		- Review Meeting: khi cuộc họp diễn ra, thư ký sẽ ghi lại tất cả các đánh giá của reviewer để yêu cầu chỉnh sửa.
		- Rework: tiến hành chỉnh sửa những thứ đã được thống nhất trong buổi họp đánh giá dựa trên các đánh giá của reviewer.
		- Follow-up: theo dõi những chỉnh sửa xem liệu có theo đúng với những đánh giá của reviewer.

------------------------------

	- Kỹ thuật phân tích tĩnh (Static Analysis): sử dụng công cụ tự động phân tích mã nguồn để tìm ra các vấn đề của cấu trúc chương trình (Source Code) hoặc những điểm yếu của chương trình, các mô hình phần mềm (Model),... mà không cần thực thi chương trình.
		Ví dụ: IDE cảnh báo biến khai báo nhưng chưa sử dụng, cảnh báo biến có sử dụng nhưng không khởi tạo giá trị,...

		-> Sử dụng công cụ để tự động kiểm tra quy chuẩn lập trình.

-------------------

	** Các vấn đề thường được phát hiện:
		- Tham chiếu đến biến nhưng giá trị của nó chưa được chỉ định (Undefined).
		- Biến khai báo nhưng không được sử dụng.
		- Phát hiện các hàm và thủ tục không được gọi.
		- Vi phạm chuẩn lập trình: cách đặt tên biến, tên hàm,...
		- Chương trình thiếu tính an toàn (Security).
		- Sử dụng các cú pháp không chính xác trong ngôn ngữ lập trình hay một ngôn ngữ thiết kế phần mềm đang sử dụng.

==============================================================================

[KHÁI NIỆM KIỂM THỬ ĐỘNG - DYNAMIC TESTING]

** Kiểm thử động (Dynamic Testing): kiểm thử khi thực thi hệ thống, truyền dữ liệu vào và so sánh kết quả kiểm thử để biết hệ thống xử lý đúng hay sai. Có thể được thực hiện thủ công (Manual) hoặc tự động (Automation).

-------------------------------------------------

[PHÂN LOẠI KIỂM THỬ ĐỘNG]

** Kiểm thử hộp đen/dựa trên đặc tả yêu cầu (Specification Based/Behavior Based/Black-box Testing).
	-> Kiểm thử chức năng (Functional Testing) + Phi chức năng (Non-Functional Testing).

** Kiểm thử hộp trắng (Structure Based Testing/White-box Testing).
	-> Kiểm thử cấu trúc (Structural Testing).

=> Kiểm thử hộp xám (Gray-box Testing/Grey-box Testing).
	= Kiểm thử hộp đen + Kiểm thử hộp trắng.

==============================================================================

[BẢNG SO SÁNH GIỮA KIỂM THỬ TĨNH & KIỂM THỬ ĐỘNG]

So sánh giữa kiểm thử tĩnh và động:

-----------------------------------------------------------------
|	Kiểm thử tĩnh		|	Kiểm thử động		|
|-------------------------------|-------------------------------|
|Xem mã nguồn, không thực thi	|Thực thi mã nguồn		|
|-------------------------------|-------------------------------|
|Thực hiện trong quy trình	|Thực hiện trong quy trình	|
|Verfication			|Validation			|
|-------------------------------|-------------------------------|
|Code inspection, walk through,	|Black-box testing,		|
|code reviews, desk checking	|white-box testing		|
-----------------------------------------------------------------

==============================================================================

[KIỂM THỬ ĐỘNG - DYNAMIC TESTING]
[KHÁI NIỆM KIỂM THỬ HỘP ĐEN - BLACK BOX TESTING]

** Kiểm thử hộp đen/dựa trên đặc tả yêu cầu (Requirements-Specification Based Testing/Behavior Based Testing/Black Box Testing):

	- Khi thiết kế sẽ phải dựa theo bảng đặc tả yêu cầu phần mềm (Software Requirements Specification - SRS) để thiết kế vì có thể đây là thông tin duy nhất làm cơ sở cho việc kiểm thử.

	- Khi kiểm thử không cần phải quan tâm đến cấu trúc, thiết kế, xử lý, cách triển khai bên trong hệ thống, công nghệ, dịch vụ mà hệ thống đang sử dụng,... mà chỉ cần có dữ liệu đầu vào và dữ liệu đầu ra. Xét xem liệu dữ liệu đầu vào (input/expected result) và dữ liệu đầu ra mong muốn (output/actual result) có khớp với nhau để từ đó đi đến kết luận Test Case đó PASS hay FAIL, chứ không cần quan tâm hệ thống sẽ phải xử lý thế nào để có được đầu ra.

		=> Đóng vai trò như người dùng cuối (end-user) để sử dụng hệ thống trong giai đoạn đã hoàn thiện hoặc gần hoàn thiện (tương tác thông qua giao diện người dùng), sau đó kết hợp và so sánh với bảng đặc tả yêu cầu để đánh giá/kết luận rằng đầu ra (ouput) có khớp với đầu vào (input) hay không.
			-> Kiểm thử những gì mà hệ thống làm được (WHAT),
				không quan tâm làm như thế nào (HOW).

------------------------------

[ƯU ĐIỂM VÀ KHUYẾT ĐIỂM CỦA KIỂM THỬ HỘP ĐEN]

** Ưu điểm:
	- Không cần truy cập mã nguồn, không cần có kiến thức chuyên sâu về lập trình mà chỉ cần biết một chút về logic xử lý.
	- Tách biệt khung nhìn (cách nhìn nhận vấn đề) của người dùng (về trải nghiệm tính năng) và lập trình viên (về xây dựng tính năng theo nghiệp vụ).
	- Nhiều người có thể tham gia kiểm thử.

** Khuyết điểm:
	- Không hiệu quả do không thấy được logic xử lý bên trong của hệ thống.
	- Khó khăn trong việc thiết kế Test Case, có thể dẫn đến thiết kế không đầy đủ đối với những người thiếu kinh nghiệm.
	- Khó phủ hết các trường hợp cụ thể nếu chưa biết đến các kỹ thuật thiết kế Test Case.
	- Không có định hướng kiểm thử rõ ràng.

------------------------------

[QUY TRÌNH THỰC HIỆN KIỂM THỬ HỘP ĐEN]

** Các bước/quy trình để thực hiện kiểm thử hộp đen:

	Bước 01: Phân tích các đặc tả chức năng của các thành phần hệ thống.
	Bước 02: Thiết kế Test Case để kiểm thử.
	Bước 03: Thực thi các Test Case để kiểm thử.
	Bước 04: So sánh kết thực tế (actual result) với kết quả mong đợi (expected result) trong từng Test Case.
	Bước 05: Lập báo cáo kết quả kiểm thử.

------------------------------

[CÁC LOẠI KIỂM THỬ HỘP ĐEN]

** Phân loại các loại kiểm thử hộp đen:

	- Kiểm thử chức năng (Functional Testing): kiểm thử các chức năng/tính năng được chỉ định của hệ thống, tính an toàn của hệ thống (Security Testing), kiểm thử sự tương tác của hệ thống với các thành phần khác được chỉ định.
		-> Kiểm thử những thứ mà ta có thể tương tác được với nó.

		//Lưu ý: tính an toàn của hệ thống (Security Testing) không phải là kiểm thử phi chức năng (Non-functional Testing)//

		* Kiểm thử có sự thay đổi (change):

			+ Kiểm thử viên phát hiện ra lỗi (bug) và báo cáo cho lập trình viên để sửa lỗi, sau khi lập trình viên sửa/thay đổi trong mã nguồn xong sẽ giao cho kiểm thử viên kiểm tra lại (verify) để xác minh rằng vấn đề đã thực sự được giải quyết theo đúng với những gì đã được báo cáo. Đây là điều hiển nhiên và là quy trình thường xuyên xảy ra.
				-> Phát hiện lỗi > Báo lỗi > Sửa lỗi > Xác minh rằng lỗi đã được sửa theo đúng báo cáo ban đầu (Retesting/Confirmation Testing).

			+ Khi tích hợp một tính năng mới vào bên trong của hệ thống, thay đổi mã nguồn, thay đổi môi trường hệ thống,... Lúc này, cần kiểm tra lại những tính năng, mô-đun cũ bằng cách thực thi hết tất cả các Test Case đã được thiết kế từ trước và có liên quan với chức năng vừa được tích hợp/thay đổi (ví dụ: đăng ký, đăng nhập, quên mật khẩu,...) để đảm bảo rằng những tính năng ấy vẫn hoạt động ổn định và không có lỗi mới phát sinh từ sự thay đổi đó. Thường áp dụng kiểm thử tự động (Automation Testing) và Unit Test để tự động hoá việc kiểm thử hồi quy (Regression Testing).
				-> Xác minh rằng những tính năng cũ vẫn chạy ổn định sau khi đã thay đổi mã nguồn hoặc môi trường hệ thống (Regression Testing).

---------------

	- Kiểm thử phi chức năng (Non-functional Testing): tập trung kiểm thử các khía cạnh hành vi của hệ thống.
		-> Kiểm thử về chất lượng.

			* Kiểm thử tính tin cậy (Reliabilty Tesing).
			* Kiểm thử tính tiện dụng (Usablilty Testing).
			* Kiểm thử tính hiệu quả (Efficiency Testing).
			* Kiểm thử khả năng bảo trì (Maintainablity Testing).
			* Kiểm thử tính khả chuyển (Portable Testing).
			* Kiểm thử hiệu năng (Performance Testing).
				+ Kiểm tra tải (Load Test).
				+ Kiểm tra sự ổn định (Stress Test).
				+ ...

------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]

** Phân loại (một cách tương đối) các kỹ thuật kiểm thử hộp đen:

	- Phân vùng/lớp tương đương (Equivalence Partitioning/Equivalence Class).
	- Phân tích giá trị biên (Boundary Value Analysis).
		-> Thường được áp dụng cho các tình huống mà các đầu vào với khoảng giá trị xác định cụ thể (ví dụ: 0-18) và không có quan hệ mắt xích, ràng buộc nhau (đầu vào này và đầu vào kia không gây ảnh hưởng gì đến kết quả của bài toán, mỗi đầu vào sẽ cho ra một kết quả độc lập).

			Ví dụ: khoảng giá trị rõ ràng, đầu vào (điểm trung bình) có thể độc lập quyết định kết quả mà không phải phụ thuộc vào những đầu vào khác
				Điểm trung bình >= 9 --> Xuất sắc
				Điểm trung bình >= 8 --> Giỏi
				Điểm trung bình >= 7 --> Khá

	- Bảng quyết định/bảng "nhân quả" (Decision Table Testing/Cause Effect).
	- Kiểm thử dịch chuyển/chuyển đổi trạng thái (State Transition Testing).
		-> Thường được áp dụng cho các tình huống có đầu vào phức tạp, các đầu vào có mối quan hệ logic phức tạp, phụ thuộc chặt chẽ vào nhau và có ràng buộc quy tắc (rule) nghiệp vụ.

			Ví dụ: ngoài xếp loại học sinh-sinh viên dựa trên điểm trung bình thì còn phải dựa trên điểm rèn luyện/hạnh kiểm.

	- Kiểm thử các trường hợp/tình huống sử dụng dựa trên lược đồ (Use Case Testing).

==============================================================================

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT PHÂN VÙNG - EQUIVALENCE PARTITIONING]

** Kỹ thuật phân vùng/lớp tương đương (Equivalence Partitioning/Equivalence Class - EP/EC): chia đầu vào của chương trình thành nhiều phân vùng/lớp dữ liệu, từ đó suy ra được những trường hợp cần kiểm thử. Xác định được những trường hợp tương đương hợp lệ (positive case - valid) và không hợp lệ (negative case - invalid), giúp loại bỏ những Test Case dư thừa, chỉ chạy những Test Case có độ bao phủ cao hơn.

Nếu không áp dụng kỹ thuật phân vùng tương đương mà chỉ kiểm thử ngẫu nhiên (Random Testing) thì sẽ có trường hợp lấy quá nhiều giá trị nằm trong cùng một phân vùng, và chưa có gì đảm bảo rằng những Test Case được chọn ngẫu nhiên đó sẽ phủ được hết các trường hợp có thể xảy ra, vì nếu các giá trị nằm trong cùng một phân vùng thì sẽ có cùng cách xử lý và cho ra cùng một kết quả. Nếu một giá trị đại diện trong nhóm mà đúng thì các giá trị còn lại trong nhóm cũng đúng và ngược lại.
	-> Nên chỉ chọn một giá trị đại diện cho toàn bộ phân vùng vì chúng có cùng cách thức xử lý và cho ra cùng một kết quả.

	-> Vẫn kiểm thử ở những phân vùng hợp lệ, nhưng tập trung nhất vào những phân vùng không hợp lệ (invalid) vì lập trình viên thường hay quên phân vùng không này và chỉ đi kiểm tra ở những phân vùng hợp lệ (valid).

Trong trường hợp các giá trị đầu vào có phụ thuộc lẫn nhau, muốn áp dụng phân vùng tương đương thì ta nhân tổ hợp các trường hợp.

------------------------------

** Lưu ý: khi chia phân vùng tương đương, từ phân vùng cha, khi chi thành các phân vùng con thì tổng các con phải đúng bằng cha, không được nhỏ hoặc lớn hơn cha.

------------------------------

** Ưu điểm:
	- Phân vùng tương đương là phân chia một tập các điều kiện kiểm thử thành các tập con có các giá trị tương đương nhau và kiểm thử các tập con này.
	- Giúp giảm thiếu số lượng Test Case không cần thiết, phủ được các đầu vào khi kiểm thử.
	- Có thể áp dụng tất cả mức độ kiểm thử (Unit Test, Integration Test, System Test, Acceptance Test).

------------------------------

** Hai phân vùng được gọi là tương đương với nhau:
	- Khi chúng tương tự nhau (intuitive similarity).

	- Trong tài liệu đặc tả có mô tả hai phần tử nằm trong cùng một phân vùng phải có cùng một cách thức xử lý (specified as equivalent).
		Ví dụ: 0 > điểm > 10 là trường hợp không hợp lệ và sẽ có cùng cách xử lý.

	- Chúng điều khiển/định hướng (drive) chương trình theo cùng đường/hướng và làm cho nghiệp vụ thực hiện theo một logic nào đó, chẳng hạn cùng nhánh if. (equivalent path).

	- Chúng cho cùng kết quả với những giả thiết đưa ra.

		-> Lấy một vài giá trị ngẫu nhiên trong phân vùng sẽ cho ra cùng 1 kết quả.

------------------------------

	Ví dụ 1: Xếp loại cuối năm học sinh dựa trên điểm trung bình (ĐTB) như sau:
			[0, 5)	| 0 ≤ ĐTB < 5: yếu, kém
			[5, 7)	| 5 ≤ ĐTB < 7: trung bình
			[7, 8)	| 7 ≤ ĐTB < 8: khá
			[8, 9)	| 8 ≤ ĐTB < 9: giỏi
			[9, 10]	| 9 <= ĐTB <= 10: xuất sắc
		Biết điểm trung bình làm tròn 1 chữ số thập phân.

		** Để kiểm thử hệ thống này, ta có thể chia thành 7 phân vùng tương đương, trong đó:
			- 5 phân vùng hợp lệ (valid): [0, 5), [5, 7), [7, 8), [8, 9), [9, 10].
			- 2 phân vùng không hợp lệ (invalid): < 0 và > 10

				  trung		      xuất
		    yếu, kém	  bình	  khá	giỏi  sắc
	<-------|---------------|-------|-----|-----|-----|------->
		0		5	7     8     9     10

	|---|--| |----------------------|----------------| |--|---|
	    |				|
	phân vùng		    phân vùng		   phân vùng
	không hợp lệ		    hợp lệ		   không hợp lệ
	(invalid)		    (valid)		   (invalid)


	-> Tester không nên chỉ test những gì trong đặc tả yêu cầu, mà còn phải nghĩ ra những thứ không được đề cập. Trong ví dụ trên, 2 phần vùng không hợp lệ (invalid) không được đề cập trong đặc tả, nhưng vẫn cần được kiểm thử.

	-> Khi thiết kế Test Case cần phải đảm bảo tất cả các phân vùng (valid & invalid) được kiểm thử qua ít nhất một lần. Ví dụ trên, cần kiểm thử ít nhất 7 điểm trung bình sau đại diện với 7 phân vùng: - 5.0, 5.5, 7.5, 8.5, 9.5, 12.0

---------------

	Ví dụ 2: Chương trình kiểm tra một ngày tháng nhập vào có hợp lệ hay không? Người dùng cần nhập vào năm, tháng, ngày của ngày muốn kiểm tra.
		(Ví dụ: 12/12/2017 là ngày hợp lệ, 32/12/2017 là ngày không hợp lệ)

		** Phân tích: ngày-tháng-năm có mối quan hệ với nhau chứ không thể độc lập, ví dụ ngày hợp lệ có thể phụ thuộc vào năm - ngày 29-02-năm nhuận, do đó phải phân vùng cho ngày-tháng-năm gắn liền với nhau. Tuy nhiên, vẫn có thể áp dụng được phân vùng tương đương.

		Năm: không hợp lệ < 1970 | 0 < Hợp lệ -> để đơn giản thì sử dụng mốc 0

		-> Tổng số năm nhuận + không nhuận = số năm hợp lệ

					nhuận			không nhuận
		<///////|-------------------------------|-----------------------|
			0	|					|
				|					|
				|					|
					 1, 3, 5, 7			
k hợp lệ  4, 6, 9, 11	      2		 8, 10, 12    k hợp lệ		2
--------|--------------|--------------|--------------|--------	  ...|-------|...
	    30 ngày	    29 ngày	  31 ngày		      28 ngày
		|
		|
		|

không hợp lệ	1	30    không hợp lệ
----------------|--------|----------------	...


		-> Tổng số tháng có 29, 30, 31 ngày = số tháng hợp lệ

		===> Có tối thiểu 18 phân vùng, chọn ra một giá trị đại diện cho từng phân vùng để kiểm thử.


		* Hợp lệ:
			- Phân vùng có số ngày từ 1-30 rơi vào các tháng 4, 6, 9, 11 của năm nhuận.
			- Phân vùng có số ngày từ 1-29 rơi vào các tháng 2 của năm nhuận.
			- Phân vùng có số ngày từ 1-31 rơi vào các tháng 1, 3, 5, 7, 8, 10, 12 của năm nhuận.


		* Không hợp lệ:
			- Phân vùng có số ngày từ 31 rơi vào các tháng 4, 6, 9, 11 của năm nhuận.
			- Phân vùng có số ngày từ 30 rơi vào các tháng 2 của năm nhuận.

---------------

	Ví dụ 3: Chức năng đăng ký tài khoản yêu cầu mật khẩu phải có chứa chữ hoa, chữ thường, số, ký tự đặc biệt và chiều dài tối thiểu là 6.

		Tập hợp____Thường
		   |_______Hoa
		   |_______Số
		   |_______Ký tự đặc biệt

		Chiều dài

			=> Nên sử dụng biểu đồ venn

		* Hợp lệ:
			- Đủ 6 ký tự và có chứa chữ hoa, chữ thường, số, ký tự đặc biệt.

		* Không hợp lệ:
			- Phân vùng 1:
				+ Chưa đủ 6 ký tự.

			- Phân vùng 2:
				+ Chỉ có chứa chữ hoa.
				+ Chỉ có chứa chữ thường.
				+ Chỉ có chứa số.
				+ Chỉ có chứa ký tự đặc biệt.

			- Phân vùng 3:
				+ Có chứa chữ hoa và thường.
				+ Có chứa chữ hoa và ký tự đặc biệt.
				+ Có chứa chữ thường và số.
				+ Có chứa chữ số và ký tự đặc biệt.

			- Phân vùng 4:
				+ Có chứa chữ hoa, thường và số.
				+ Có chứa chữ hoa, thường và ký tự đặc biệt.
				+ Có chứa chữ hoa, ký tự đặc biệt và số.
				+ Có chứa ký tự đặc biệt, số và thường.

		=> Trong đề bài chỉ ràng buộc chiều dài tối thiểu là 6 nhưng không ràng buộc chiều dài tối đa (trong đặc tả không đề cập)
			-> Đang ngờ, có thể gây vấn đề (Incident).

---------------

	Ví dụ 4: kiểm thử biểu mẫu đăng nhập đơn giản.
		- Chỉ được phép nhập từ 6 đến 20 ký tự.
		- Để trống hoặc không phải chữ -> Thông báo: "Tên người dùng chưa hợp lệ! Vui lòng nhập ký tự chữ".

		* Hợp lệ:
			+ Phân vùng 1: nhập giá trị hợp lệ từ 6 -> 20 ký tự.

		* Không hợp lệ:
			+ Phân vùng 2: nhập giá trị không hợp lệ < 6  ký tự.
			+ Phân vùng 3: nhập giá trị không hợp lệ > 20  ký tự.
			+ Phân vùng 4: trường hợp để trống, không nhập gì hoặc nhập ký tự không phải dạng chữ.

		=> 4 Test Case cụ thể.

			- Case 1: nhập giá trị từ 6 -> 20 ký tự => pass

			- Case 2: nhập giá trị < 6 ký tự (có thể nhập 1, 2, 3, ..., 5 ký tự) => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 3: nhập giá trị > 20 ký tự (có thể nhập 21, 22, 23,... ký tự) => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 4: để trống, không nhập gì hoặc nhập ký tự không phải dạng chữ => Hiển thị lỗi: "Tên người dùng chưa hợp lệ! Vui lòng nhập ký tự chữ".

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT PHÂN TÍCH GIÁ TRỊ BIÊN - BOUNDARY VALUE ANALYSIS]

** Kỹ thuật phân tích giá trị biên (Boundary Value Analysis - BVA): là trường hợp đặc biệt và bao quát của phân vùng tương đương. Thay vì lấy những giá trị ngẫu nhiên của một phân vùng thì ta chỉ cần lấy những giá trị nằm ở gần biên.

Kiểm thử dựa trên các giá trị tại biên giữa các phân vùng tương đương (gồm tình huống hợp lệ (valid) và không hợp lệ (invalid)), giúp hạn chế việc lựa chọn những giá trị ngẫu nhiên để kiểm thử trong kỹ thuật phân vùng tương đương.

Áp dụng nguyên lý 20-80, lỗi thường tập trung ở những giá trị biên, vì vậy chỉ cần lấy những giá trị ở biên và ở gần biên để đại diện cho phân vùng đó.

------------------------------

** Ưu điểm:
	- Đơn giản.
	- Hiệu quả cho các hàm có biến độc lập.
	- Có thể tự động sinh Test Case khi xác định được giá trị biên của các biến.

---------------

** Khuyết điểm:
	- Không quan tâm đặc trưng của hàm, ngữ nghĩa các biến, cũng như quan hệ giữa các biến.
	- Khó áp dụng cho trường hợp các biến có quan hệ ràng buộc nhau.

------------------------------

** Một số quy tắc xác định giá trị biên khi thiết kế Test Case:
	- Giá trị nhỏ nhất (biên dưới).
	- Giá trị nhỏ nhì (cận biên dưới).
	- Giá trị lớn nhất (biên trên).
	- Giá trị lớn nhì (cận biên trên).
	- Giá trị bình thường/ngẫu nhiên.
-> Tuỳ vào yêu cầu mà ta chỉ cần lấy 2 (nhỏ nhất và lớn nhất) hoặc lấy cả 5 giá trị cho một phân vùng.

------------------------------

	Ví dụ 1: nhập khoảng giá trị [5, 10]
			- Biên trên: 5 -> nhỏ nhất
			- Cận biên trên: 6 -> nhỏ nhì

			- Biên dưới: 10 -> lớn nhất
			- Cận biên dưới: 9 -> lớn nhì

			- Giá trị bình thường/ngẫu nhiên: 7

---------------

	Ví dụ 2: trở lại ví dụ xếp loại học sinh ở kỹ thuật phân vùng tương đương.

				  trung		      xuất
		    yếu, kém	  bình	  khá	giỏi  sắc
	<-------|---------------|-------|-----|-----|-----|------->
		0		5	7     8     9     10

		* Hợp lệ:
			Đoạn “yếu, kém”: 0 và 4.9
			Đoạn “trung bình”: 5 và 6.9
			Đoạn “khá”: 7 và 7.9
			Đoạn “giỏi”: 8 và 8.9
			Đoạn “xuất sắc”: 9 và 10

		* Không hợp lệ:
			Lấy giá trị đầu tiên trong đoạn > 10 là 10.1
			Lấy giá trị cuối cùng trong đoạn < 0 là -0.1

---------------

	Ví dụ 3: kiểm tra số nguyên dương n có phải là số nguyên tố không
			(màn hình console cho phép nhập số nguyên dương n
			và xuất kết quả thông báo số đó có phải nguyên tố hay không)

		(Ghi chú: số nguyên tố là số tự nhiên chỉ có hai ước số dương phân biệt là 1 và chính nó)

		- Số nguyên tố được nhập vào phải là số nguyên
			+ Phải là số nguyên dương
				+ Không phải số nguyên tố
				+ Là số nguyên tố

			- Phân vùng số nguyên tố chẵn: 2
			- Phân vùng số nguyên tố lẻ: 3
			- Phân vùng số lẻ không phải số nguyên tố: 1
			- Phân vùng số chẵn không là số nguyên tố: 4

---------------

	Ví dụ 4: kiểm thử biểu mẫu đăng nhập đơn giản
		=> Phân vùng giữ nguyên nhưng có sự thay đổi về Test Case.
 
			- Case 1: nhập giá trị với 5 ký tự => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 2: nhập giá trị với 6 ký tự => pass

			- Case 3: nhập giá trị với 20 ký tự => pass

			- Case 4: nhập giá trị với 21 ký tự => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 5: để trống, không nhập gì hoặc nhập ký tự không phải dạng chữ => Hiển thị lỗi: "Tên người dùng chưa hợp lệ! Vui lòng nhập ký tự chữ".

---------------

	Ví dụ 5: ngân hàng quy định không được chuyển khoản quá 10 triệu (tr) trong ngày, tối thiểu mỗi lần chuyển khoản là 1tr.

		Gọi X là số tiền muốn chuyển trong ngày (X >= 1)
		Gọi M là tổng số tiền đã chuyển trong ngày (M <= 10)

		- Phân vùng 1: không chuyển được
				X < 1 || X > 10

		- Phân vùng 2: không chuyển được
				M = 10

		- Phân vùng 3: chuyển được
				X ∈ [1, 10]
				1 <= X + M <= 10

				-------------------------------------------------
				|	Input	|	Output			|
				|---------------|-------------------------------|
				|X	|M	|	Expected		|
			--------|-------|-------|-------------------------------|
			|Hợp	|1	|0	|Được phép chuyển khoản		|
			|lệ	|-------|-------|-------------------------------|
			|	|1	|9	|Được phép chuyển khoản		|
			|	|-------|-------|-------------------------------|
			|	|2	|8	|Được phép chuyển khoản		|
			|	|-------|-------|-------------------------------|
			|	|5	|5	|Được phép chuyển khoản		|
			|	|-------|-------|-------------------------------|
			|	|9	|1	|Được phép chuyển khoản		|
			|	|-------|-------|-------------------------------|
			|	|10	|0	|Được phép chuyển khoản		|
			|-------------------------------------------------------|
			|Không	|0	|1	|Không được phép chuyển khoản	|
			|hợp	|-------|-------|-------------------------------|
			|lệ	|1	|10	|Không được phép chuyển khoản	|
			|	|-------|-------|-------------------------------|
			|	|11	|1	|Không được phép chuyển khoản	|
			---------------------------------------------------------

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT BẢNG QUYẾT ĐỊNH - DECISION TABLE TESTING]

** Kỹ thuật bảng quyết định/bảng "nhân quả" (Decision Table Testing/Cause Effect - DT/CE): dùng khi phải kết hợp các điều kiện đầu vào (input) lại với nhau, khi số lượng điều kiện cần kết hợp khá lớn, dẫn đến việc không thể nhớ được một trường hợp nào đó đã được kiểm thử hay chưa.

Giúp xác định những kịch bản (Scenario) kiểm thử cho những trường hợp có logic nghiệp vụ phức tạp. Giúp xác định một cách hiệu quả sự kết hợp các đầu vào khác nhau với các tình trạng phần mềm thực thi đúng quy tắc nghiệp vụ.

Nên được sử dụng trong những chương trình có nhiều lệnh rẽ nhánh (if-else, switch-case) và các biến đầu vào có mối quan hệ với nhau.

------------------------------

** Cấu trúc của bảng quyết định:

(1) Các điều kiện: có thể là một biến, một quan hệ hoặc một biểu thức mệnh đề nào đó.
	Ví dụ:
		- Tài khoản.
		- Mật khẩu.
		- Lương >= 5tr/tháng.
		- Trời nắng.

(2) Các giá trị điều kiện: một giá trị nào đó của điều kiện, tổ hợp (tích Đềcác) các giá trị điều kiện sẽ cho ra cột quy tắc/thoả quy tắc (rule). Nếu số lượng cột (sự kết hợp) quá nhiều thì có thể viết các giá trị ở dạng tóm tắt.
	Ví dụ:
		- Để trống.
		- Hợp lệ.
		- Không hợp lệ.
		- Đúng.
		- Sai.

-------------------------------------------------------------------------
|(1) Các điều kiện	|(2) Các giá trị điều kiện - Quy tắc (Rule)	|
|-----------------------|-----------------------------------------------|
|(3) Hành động		|(4) Xảy ra hay không				|
-------------------------------------------------------------------------

(3) Hành động: một thủ tục hoặc thao tác cần thực hiện.
	Ví dụ:
		- Trạng thái đăng nhập.

		- Chuyển đến trang chủ.

(4) Xảy ra hay không: các giá trị của hành động. Một hành động có thể xảy ra phụ thuộc vào tổ hợp các giá trị điều kiện (kết quả mong muốn có).
	Ví dụ:
		- Đăng nhập thành công.
		- Đăng nhập thất bại.

		- Được chuyển đến trang chủ.
		- Không được chuyển đến trang chủ.

------------------------------

** Các bước để xây dựng bảng quyết định:

	Bước 01: xác định các chức năng cần sử dụng để kiểm thử.

	Bước 02: xác định và liệt kê danh sách các điều kiện đầu vào, sau đó tách ra thành những tập con và xử lý từng tập con một.

	Bước 03: tính số lượng kết hợp giữa đúng và sai, số lượng kết hợp giữa các giá trị điều kiện đầu vào và đặt các kết hợp đó vào trong phần (2) - Các giá trị điều kiện.

	Bước 04: xác định các Test Case tương ứng cho các điều kiện được thoả mãn.

	Bước 05: các hành động khi thoả điều kiện chính là kết quả mong đợi của Test Case.


* Lưu ý: không quá quan trọng thứ tự các điều kiện và thứ tự thực hiện hành động.

------------------------------

	Ví dụ 1: biểu mẫu đăng nhập đơn giản

		- Đúng email và mật khẩu -> Trang chủ

		- Sai email và mật khẩu -> Thông báo lỗi
			+ Đúng email & mật khẩu -> Trang chủ
			+ Đúng email, sai mật khẩu -> Thông báo lỗi
			+ Sai email, đúng mật khẩu -> Thông báo lỗi
			+ Sai email, sai mật khẩu -> Thông báo lỗi

		---------------------------------------------------------
		|Điều kiện		|QT 1	|QT 2	|QT 3	|QT 4	|
		|-----------------------|-------|-------|-------|-------|
		|Email (Đ/S)		|Đúng	|Đúng	|Sai	|Sai	|
		|-----------------------|-------|-------|-------|-------|
		|Mật khẩu (Đ/S)		|Đúng	|Sai	|Đúng	|Sai	|
		|-----------------------|-------|-------|-------|-------|
		|Kết quả (Trang Chủ/Lỗi)|Tr. chủ|Lỗi	|Lỗi	|Lỗi	|
		---------------------------------------------------------

---------------

	Ví dụ 2: biểu mẫu đăng nhập phức tạp
		- Xác định các điều kiện/đầu vào: username và password.

		- Mỗi đầu vào trên nhận một trong 3 giá trị:
			+ Rỗng (Blank - B),
			+ Hợp lệ (Valid - V),
			+ Không hợp lệ (Invalid - I).

		-> Số kết hợp giá trị các điều kiện có thể xảy ra là 9

		     (1)    (2)    (3)    (4)    (5)    (6)    (7)    (8)    (9)

-----------------------------------------------------------------------------------
|Các	|Tài khoản |  B   |  B   |  B   |  I   |  I   |  I   |  V   |  V   |  V   |
|điều	|----------|------|------|------|------|------|------|------|------|------|
|kiện	|Mật khẩu  |  B   |  I   |  V   |  B   |  I   |  V   |  B   |  I   |  V   |
|---------------------------------------------------------------------------------|
|	|Thông điệp|  M1  |  M1  |  M1  |  M3  |  M3  |  M3  |  M2  |  M4  |      |
|Các	|lỗi	   |      |      |      |      |      |      |      |      |      |
|hành	|----------|------|------|------|------|------|------|------|------|------|
|động	|Chuyển đến|  L   |  L   |  L   |  L   |  L   |  L   |  L   |  L   |  H   |
|	|trang	   |      |      |      |      |      |      |      |      |      |
-----------------------------------------------------------------------------------

			M1: Vui lòng nhập username
			M2: Vui lòng nhập password
			M3: Username không hợp lệ
			M4: Password không hợp lệ

			L: Trang Login
			H: Trang Home

---------------

** Nguyên tắc rút gọn các kết hợp các giá trị đầu vào.
	+ Những trường hợp (cột quy tắc - rule) có cùng giá trị hành động (4), nhưng chỉ khác giá trị của một điều kiện duy nhất (2).

	+ Chuyển giá trị của điều kiện khác nhau đó thành “-” và gom các cột lại thành một.

	+ Lặp lại hai bước trên cho đến khi không còn các cột nào như thế.

---------------

** Phân tích:
	- Khi tài khoản rỗng, bất chấp mật khẩu là giá trị gì thì đều sẽ hiển thị cùng một thông điệp lỗi và chuyển đến cùng một trang giống nhau. Khi này, các giá trị trong mật khẩu sẽ được chuyển thành “-”
		-> Bất luận mật khẩu là gì thì kết quả vẫn không đổi (M1 & L).

	- Tương tự với tài khoản không hợp lệ.
		-> Bất luận mật khẩu là gì thì kết quả vẫn không đổi (M3 & L).

	--------------------------------------------------------------------
	|Các	|Tài khoản 		|  B   |  I   |  V   |  V   |  V   |
	|điều	|-----------------------|------|------|------|------|------|
	|kiện	|Mật khẩu  		|  -   |  -   |  B   |  I   |  V   |
	|------------------------------------------------------------------|
	|Các	|Thông điệp lỗi		|  M1  |  M3  |  M2  |  M4  |      |
	|hành	|-----------------------|------|------|------|------|------|
	|động	|Chuyển đến trang	|  L   |  L   |  L   |  L   |  H   |
	--------------------------------------------------------------------

			M1: Vui lòng nhập username
			M2: Vui lòng nhập password
			M3: Username không hợp lệ
			M4: Password không hợp lệ

			L: Trang Login
			H: Trang Home

---------------

** Các quy tắc chuyển từ bảng quyết định thành các Test Case:
	+ Nếu giá trị các điều kiện nhập (1) đều là các giá trị luận lý (true/false) thì mỗi cột quy tắc (rule) sẽ được chuyển thành một Test Case.

	+ Nếu giá trị các điều kiện nhập có nhiều giá trị (miền giá trị từ 0..100, abc..xyz,...) thì mỗi cột quy tắc (rule) sẽ được chuyển thành nhiều Test Case bằng cách sử dụng thêm kỹ thuật phân vùng tương đương hoặc phân tích giá trị biên vào mỗi cột.

	-------------------------------------------------------------------------
	|Test	|Tài khoản	|Mật khẩu	|Thông báo lỗi	|Chuyển đến	|
	|Case	|		|		|		|trang		|
	|-------|---------------|---------------|---------------|---------------|
	|TC_001	|[Rỗng]		|abc		|	M1	|	L	|
	|-------|---------------|---------------|---------------|---------------|
	|TC_002	|blah (k hợp lệ)|abc		|	M3	|	L	|
	|-------|---------------|---------------|---------------|---------------|
	|TC_003	|An (hợp lệ)	|[Rỗng]		|	M2	|	L	|
	|-------|---------------|---------------|---------------|---------------|
	|TC_004	|An (hợp lệ)	|[Các giá trị	|	M1	|	L	|
	|	|		|của phân vùng	|		|		|
	|	|		|không hợp lệ]	|		|		|
	|	|		|VD: a9, aA9,...|		|		|
	|-------|---------------|---------------|---------------|---------------|
	|TC_005	|An (hợp lệ)	|aA!1Aa (hợp lệ)|	M1	|	L	|
	-------------------------------------------------------------------------

	* TC_005: sử kỹ thuật phân tích giá trị biên để lấy những:
			+ Giá trị nhỏ nhất (phải có).
			+ Giá trị cận nhỏ nhất.
			+ Giá trị bất kỳ.
			+ Giá trị cận lớn nhất.
			+ Giá trị lớn nhất (phải có).

			M1: Vui lòng nhập username
			M2: Vui lòng nhập password
			M3: Username không hợp lệ
			M4: Password không hợp lệ

			L: Trang Login
			H: Trang Home

---------------

	Ví dụ 3: Cho chương trình xác định một tam giác có phải là tam giác cân không, biết người dùng nhập vào chiều dài 3 cạnh a, b, c của tam giác.

		* Phân tích:
			- Đầu vào: a, b, c

			- Điều kiện:
				1. (a, b, c) > 0

				2.
					a + b > c
					a + c > b
					b + c > a
						-> tam giác

				3. a = b || b = c || a = c
					-> tam giác cân

		* Kết luận:

			- Nếu một trong các điều kiện để trở thành tam giác là sai (ví dụ: a + b < c) thì có thể lập tức kết luận tam giác đó không phải là tam giác cân.
				-> 3 Test Case

			- Nếu cả ba điều kiện để trở thành tam giác là đúng và một trong các điều kiện để trở thành tam giác cân là đúng (ví dụ: a = b) thì có thể lập tức kết luận tam giác đó là tam giác cân.
				-> 3 Test Case

			- Nếu cả ba điều kiện để trở thành tam giác là đúng nhưng không thoả bất kỳ điều kiện để trở thành tam giác cân nào thì có thể kết luận tam giác đó không phải là tam giác cân.
				-> 1 Test Case

	------------------------------------------------------------------
	|Các	|a+b > c|  S   |  -   |  -   |  Đ   |  Đ   |  Đ   |  Đ   |
	|điều	|-------|------|------|------|------|------|------|------|
	|kiện	|a+c > b|  -   |  S   |  -   |  Đ   |  Đ   |  Đ   |  Đ   |
	|	|-------|------|------|------|------|------|------|------|
	|	|b+c > a|  -   |  -   |  S   |  Đ   |  Đ   |  Đ   |  Đ   |
	|	|--------------------------------------------------------|
	|	|a = b	|  -   |  -   |  -   |  Đ   |  -   |  -   |  S   |
	|	|-------|------|------|------|------|------|------|------|
	|	|b = c	|  -   |  -   |  -   |  -   |  Đ   |  -   |  S   |
	|	|-------|------|------|------|------|------|------|------|
	|	|a = c	|  -   |  -   |  -   |  -   |  -   |  Đ   |  S   |
	|----------------------------------------------------------------|
	|H.động	|TG cân	|  S   |  S   |  S   |  Đ   |  Đ   |  Đ   |  S   |
	------------------------------------------------------------------

---------------

	Ví dụ 4: độc giả mượn sách không được quá 500 quyển sách trong năm (không phân biệt tên đầu sách), nhưng không được phép mượn quá 5 quyển trong một lần mượn, và phải trả các cuốn sách đã mượn mới được phép mượn tiếp nữa.

	* Điều kiện:
		1. Gọi biến X là số sách được mượn trong mỗi lần mượn (1 <= X <= 5)
		2. Gọi biến M là tổng số sách đã mượn trong năm (0 <= X + M <= 500)
		3. Gọi biến Z là trường hợp không còn nợ sách (đã trả hết sách đã mượn)
			-> Là giá trị Đúng/Sai (không phải là một giá trị cụ thể).

		* Bảng quyết định:
						-------------------------------------------------------
						|Quy tắc 1|Quy tắc 2|Quy tắc 3|		Quy tắc 4     |
		--------------------------------|---------|---------|---------|-----------------------|
		|Các	|1 <= X <= 5		|    -    |    S    |    -    |		Đ	      |
		|điều	|-----------------------|---------|---------|---------|-----------------------|
		|kiện	|1 <= X + M <= 500	|    -    |    -    |    S    |		Đ	      |
		|	|-----------------------|---------|---------|---------|-----------------------|
		|	|	Z		|    S    |    Đ    |    Đ    |		Đ	      |
		|-------------------------------------------------------------------------------------|
		|Các	|	Được mượn	|    S    |    S    |    S    |		Đ	      |
		|hành	|-----------------------|---------|---------|---------|-----------------------|
		|động	|	Mượn tối đa	|    0    |    0    |    0    |    min(5, 500 - M)    |
		|	|			|         |         |         | 500-m < 5 ? 500-m : 5 |
		---------------------------------------------------------------------------------------

	* Thiết kế Test Case cho Quy tắc 4 và kết hợp với phân tích giá trị biên:
	a) 1 <= X <= 5 		---->	Đ	=> 2 biên 1 và 5
							-> Chọn X = 1 để chạm biên dưới của X
	a1) 1 <= X + M <= 500 	---->	Đ	=> Chọn M = 0 để chạm biên dưới của M vì X = 1
	a2) 1 <= X + M <= 500 	---->	Đ	=> Chọn M = 499 để chạm biên trên của M vì X = 1

	b) 1 <= X <= 5 		---->	Đ	=> 2 biên 1 và 5
							-> Chọn X = 5 để chạm biên trên của X
	b1) 1 <= X + M <= 500 	---->	Đ	=> Bắt buộc phải chọn M = 495 để chạm biên trên của M
							(Không thể chạm biên dưới "1 < = X + M" khi X = 5)

		* Test Case: áp dụng thêm kỹ thuật phân tích giá trị biên để sinh Test Case cho những giá trị không phải là luận lý (Đúng/Sai), đảm bảo bộ dữ liệu có ít nhất hai giá trị tối thiểu và tối đa.
		-------------------------------------------------------------------------
		|Test	|Dữ liệu đầu vào	|	Kết quả mong đợi		|
		|Cases	|-----------------------|---------------------------------------|
		|	|Z	|X	|M (X+M)|	Được mượn	|Mượn tối đa	|
		|-------|-------|-------|-------|-----------------------|---------------|

		* Z là Đúng/Sai nên chỉ cần một Test Case với Z mang giá trị Sai, những giá trị còn lại hợp lệ
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_01.1|S	|1	|499	|Không được phép mượn	|	0	|	// Quy tắc 1
		|-------|-------|-------|-------|-----------------------|---------------|

		* Z là Đúng, X là Sai, những giá trị còn lại hợp lệ (áp dụng thêm kỹ thuật PTGTB)
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_02.1|Đ	|6	|494	|Không được phép mượn	|	0	|	// Quy tắc 2
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_02.2|Đ	|0	|500	|Không được phép mượn	|	0	|
		|-------|-------|-------|-------|-----------------------|---------------|

		* Z là Đúng, M (X + M) là Sai, những giá trị còn lại hợp lệ (áp dụng thêm kỹ thuật PTGTB)
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_03.1|Đ	|5	|496	|Không được phép mượn	|	0	|	// Quy tắc 3
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_03.2|Đ	|1	|500	|Không được phép mượn	|	0	|
		|-------|-------|-------|-------|-----------------------|---------------|

		* Z là Đúng, những giá trị còn lại hợp lệ (áp dụng thêm kỹ thuật PTGTB)

			* X đạt tối thiểu và tối đa, M (X + M) đạt tối đa
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_04.1|Đ	|1	|499	|Được phép mượn		|	1	|	// Quy tắc 4
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_04.2|Đ	|5	|495	|Được phép mượn		|	5	|
		|-------|-------|-------|-------|-----------------------|---------------|

			* M (X + M) đạt tối thiểu và cận tối đa
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_04.3|Đ	|1	|0	|Được phép mượn		|	5	|
		|-------|-------|-------|-------|-----------------------|---------------|
		|TC_04.4|Đ	|4	|495	|Được phép mượn		|	5	|
		-------------------------------------------------------------------------

---------------

	Ví dụ 5: xét học bổng cho sinh viên nếu không rớt môn nào trong học kỳ đó và có điểm trung bình từ 7.0 trở lên. Điểm tính trên thang điểm 10, điểm qua môn tính từ 5 trở lên. Với những môn học có điểm >= 4 và < 5 cũng sẽ được xem là qua môn nếu điểm trung bình học kỳ đó là 7.5 trở lên.

		* Điều kiện xét học bổng:
			- Không rớt môn nào trong học kỳ đó.
				+ Điểm qua môn >= 5.0.
				+ Điểm qua môn >= 4 và < 5 khi điểm trung bình học kỳ đó >= 7.5.

			- Điểm trung bình >= 7.0.

		Gọi A là môn có điểm nhỏ nhất trong tất cả các môn của học kỳ đó
			4 <= A < 5
			5 <= A <= 10
		Gọi B là điểm trung bình tất cả các môn của học kỳ đó
			7 <= B < 7.5
			7.5 <= B <= 10

		* Bảng quyết định:

					     (1)          (2)          (3)          (4)          (5)

		------------------------------------------------------------------------------------------
		|Các	|	A	|   [0, 4)   |   [4, 5)   |   [4, 5)   |   [5, 10]  |   [5, 10]  |
		|điều	|---------------|------------|------------|------------|------------|------------|
		|kiện	|	B	|      -     |  [0, 7.5)  | [7.5, +∞)  |  [0, 7.0)  | [7.0, +∞)  |
		|-----------------------------------------------------------------------------------------
		|Hành	|Được nhận	|      S     |      S     |      Đ     |      S     |      Đ     |
		|động	|học bổng	|            |            |            |            |            |
		------------------------------------------------------------------------------------------

		* Test Case cho quy tắc 5: giả sử học kỳ có 3 môn
		-----------------------------------------
		|Dữ liệu đầu vào|Kết quả mong đợi	|
		|---------------|-----------------------|
		|Điểm các môn	|Có được học bổng	|
		|---------------------------------------|
		|[5, 8, 8]	|	Được học bổng	|
		|[10, 10, 10]	|	Được học bổng	|
		-----------------------------------------

---------------

	Ví dụ 6: chương trình khuyến mãi tặng 1 loa bluethooth và miếng dán màn hình áp dụng cho những khách hàng mua dòng điện thoại cao cấp (nếu giá bán >= 20tr) diễn ra từ ngày 20/11/2017 đến hết ngày 31/12/2017. Ngoài ra, nếu đã từng dùng dòng điện thoại cao cấp của hãng A, tính từ thời điểm đã mua cho đến thời điểm mua mới, nếu khoảng thời gian này:
			- Không quá 1 năm thì khách hàng sẽ được giảm thêm 2 triệu trên giá sản phẩm.
			- Từ trên 1 năm đến nhỏ hơn hoặc bằng 2 năm thì khách hàng được giảm thêm 1 triệu trên giá sản phẩm.

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT CHUYỂN ĐỔI TRẠNG THÁI - STATE TRANSITION TESTING]

* Sơ đồ trạng thái (State Diagram): biểu diễn trạng thái (state) của hệ thống và các sự kiện (event) làm chuyển đổi (transition) từ trạng thái này sang trạng thái khác. Tuỳ vào những trạng thái khác nhau mà hệ thống sẽ có những cách xử lý (action) khác nhau tương ứng với trạng thái đó.

---------------

** Kỹ thuật chuyển đổi trạng thái (State Transition Testing): khi một vài phần của hệ thống được mô tả bằng trạng thái, khi hệ thống đang ở một trạng thái này và chuyển sang một thái này khác (trong một phiên làm việc) theo một quy tắc nào đó của phần mềm.
	-> Kiểm thử quá trình chuyển đổi giữa các form, các trang trên website,...

------------------------------

Mô hình chuyển đổi sẽ bao gồm bốn phần cơ bản:

	1. Các trạng thái (states) phần mềm có thể xảy ra.

	2. Sự dịch chuyển/phiên chuyển đổi (transitions) từ trạng thái này sang trạng thái khác.

	3. Các sự kiện (events) dẫn đến sự dịch chuyển trạng thái.

	4. Các hành động/kết quả (actions) là kết quả của việc dịch chuyển trạng thái (hành xử của hệ thống sau khi rơi vào trạng thái đó).
		- Điều kiện đơn (Đúng/Sai): chỉ cần xây dựng 1 Test Case.
		- Điều kiện là số: sử dụng thêm kỹ thuật phân vùng tương đương và phân tích giá trị biên để lấy dữ liệu và xây dựng Test Case.

------------------------------

	Ví dụ 1: từ trạng thái đăng nhập -> đăng nhập thành công

---------------

	Ví dụ 2: nhập mã pin
		-> đúng -> đăng nhập thành công

		-> sai -> thử lại -> sai 3 lần -> khoá thẻ

---------------

	Ví dụ 3: quy trình sửa lỗi (fix bug) của một hệ thống bug tracking
		- Tester phát hiện bug và tạo báo cáo bug (bug report) bắt đầu với trạng thái “Open”.
		- Developer xem xét nếu thấy nó không phải bug thì chuyển bug sang thái “Won't Fix” và giải thích cho tester.
		- Nếu tester cũng đồng ý đó không phải bug thì chuyển bug sang trạng thái “Closed”, ngược lại chuyển về trạng thái “Open”.
		- Nếu tester kiểm tra qua bug đã được fix và thấy ổn thì chuyển bug sang trạng thái “Closed”, ngược lại chuyển nó về trạng thái “Open” và yêu cầu developer fix lại.
		- Sau khi bug đã đóng, nhưng quá trình test sau đó lại thấy nó tái xuất hiện thì tester có thể chuyển nó về trạng thái “Open” và yêu cầu developer tiếp tục fix.

		* Các trạng thái (states): O = Open, IP = In Progress, WF = Won't Fix, T = Testing, C = Closed.

		* Các dịch chuyển (transitions):
			- Open -> In Progress, Won't Fix
			- In Progress -> Won't Fix, Testing
			- Won't Fix -> Open, Close
			- Testing -> Open, Closed
			- Closed -> Open

		* Các sự kiện (events):
			- E1: bắt đầu fix bug
			- E2: không phải bug
			- E3: bug đã được fix
			- E4: xác nhận bug đã được fix
			- E5: bug được fix chưa đúng hoặc chưa đầy đủ
			- E6: xác nhận không phải bug
			- E7: bug cần fix
			- E8: tái xuất hiện bug

		* Các hành động kết quả (actions): khi có bất cự sự thay đổi trạng thái nào của bug, hệ thống sẽ gửi email thông báo đến tất cả các thành viên có liên quan đến bug đó vế trạng thái hiện tại của bug.


		* Sơ đồ trạng thái:

				E5: bug được fix chưa đúng hoặc chưa đầy đủ
	--------------------------------------------------------------------------------------
	|										     |
	|							E3: bug đã được fix	     |
	|					(In Process)--------------------------->(Testing)
	|					    ^	|				     |
	|					    |	|				     |
	|		      E1: bắt đầu fix bug   /	|				     |
	|		   -------------------------	|				     | E4: xác nhận
	|		  /				| E2: không phải bug		     |	   bug đã
	|		  |	E7: bug cần fix		|				     |	   được fix
	|		  |  ------------------------	|				     |
	|		  |  |			    |	|				     |
	|	Bug được  |  V E2: không phải bug   |	v				     v
	|	-------->(Open)------------------>(Won't Fix)--------------------------->(Closed)
	|	phát hiện ^  ^				     E6: xác nhận không phải bug     |
	|		  |  |								     |
	------------------   -----------------------------------------------------------------
						E8: tái xuất hiện bug

		* Bảng mô tả trạng thái:
		-----------------------------------------------------------------
		|	|  E1  |  E2  |  E3  |  E4  |  E5  |  E6  |  E7  |  E8  |
		|-------|------|------|------|------|------|------|------|------|
		|  O    |  IP  |  WF  |      |      |      |      |      |      |	O = Open
		|-------|------|------|------|------|------|------|------|------|
		|  IP   |      |  WF  |  T   |      |      |      |      |      |	IP = In Progress
		|-------|------|------|------|------|------|------|------|------|
		|  T    |      |      |      |  C   |  O   |      |      |      |	T = Testing
		|-------|------|------|------|------|------|------|------|------|
		|  C    |      |      |      |      |      |      |      |  O   |	C = Closed
		|-------|------|------|------|------|------|------|------|------|
		|  WF   |      |      |      |      |      |  C   |  O   |      |	WF = Won't Fix
		-----------------------------------------------------------------

		* Dựa vào bảng trạng thái có thể thiết kế 9 test case hợp lệ:
			// Kết quả mong đợi
			O -> IP, O -> WF
			IP -> WF, IP -> T
			T -> C, T -> O
			C -> O
			WF -> C, WF -> O
			và một vài trường hợp không hợp lệ.
		  (Những ô có giá trị là ô hợp lệ, còn lại là không hợp lệ. Không lấy hết những ô còn lại để kiểm thử mà chỉ lấy những ô nào có khả năng phủ được hết tất cả các trường hợp.)

---------------

	Ví dụ 4: Một hệ thống quản lý cho phép gửi và nhận tin nhắn trong hệ thống.
		* khi người dùng nhận tin mới có trạng thái là tin chưa đọc,
		  nếu người nhận mở ra đọc thì tin đó thành trạng thái đã đọc.

		* Sau khi đọc tin, người dùng cũng có thế chuyển nó thành tin chưa đọc để ghi nhớ.

		* Người dùng cũng có thể xóa tin tức, ban đầu tin xóa tạm nằm trong thùng rác,
		  trong 24g kể từ lúc xóa người dùng có thể phục hồi lại trạng thái trước khi xóa,
		  sau khoảng thời gian này tin sẽ bị xóa vĩnh viễn.


		* Các sự kiện (events):
			E1: mở tin ra đọc
			E2: chuyển thành tin chưa đọc để ghi nhớ
			E3: xóa tin tức tạm thời
			E4: phục hồi lại trạng thái trước khi xóa
			E5: xoá vĩnh viễn sau 24g


		* Bảng mô tả trạng thái:
		------------------------------------------------------------
		|			|  E1  |  E2  |  E3  |  E4  |  E5  |
		|-----------------------|------|------|------|------|------|
		|Tin chưa đọc (TCĐ)	| TĐĐ  |      |  TX  |      |      |
		|-----------------------|------|------|------|------|------|
		|Tin đã đọc (TĐĐ)	|      | TCĐ  |  TX  |      |      |
		|-----------------------|------|------|------|------|------|
		|Tạm xoá (TX)		|      |      |      | TCĐ  | XVV  |
		|			|      |      |      | TĐĐ  |      |
		|-----------------------|------|------|------|------|------|
		|Xóa vĩnh viễn (XVV)	|      |      |      |      |      |
		------------------------------------------------------------

		Ta có:
			Tạm xoá -> Tin chưa đọc
				-> Tin đã đọc

			Có hai trạng thái, cần phải tách thành 2 Test Case bằng cách áp dụng kỹ thuật phân tích giá trị biên và bảng quyết định.

---------------

	Ví dụ 5: chức năng cho phép đăng bài viết
		* Một bài viết khi đăng mới chỉ được phép cập nhật (E1)
		  hoặc xóa (E2) trong vòng 15 phút kể từ lúc submit đăng bài,
		  sau khoảng thời gian này bài viết không được phép chính sửa hay xóa nữa
		  và bài viết sẽ tự động được xuất bản trên hệ thống (E3) để người khác có thể đọc.

		* Khi vừa soạn xong bài viết hoặc trong vòng 15 phút từ lúc submit bài viết,
		  tác giả bài viết có quyền bấm nút “Publish” để chủ động xuất bản bài viết (E4),
		  và tất nhiên không được xóa hoặc cập nhật bài viết sau khi đã xuất bản.

		* Sau khi một bài viết được xuất bản, tác giả bài viết muốn xóa (E5)
		  hoặc cập nhật (E6) bài viết cần phải liên hệ với admin để admin thực hiện.

		* Sau khi admin chỉnh sửa bài viết đã xuất bản (E6),
		  bài viết đó vẫn ở trạng thái xuất bản để người khác đọc.


		* Các sự kiện (events):
			E1: cập nhật trong 15p
			E2: xoá trong 15p
			E3: (system) tự động công bố sau 15p
			E4: (owner) chủ động công bố
			E5: (admin) xoá
			E6: (admin) cập nhật


		* Sơ đồ trạng thái:

			E3: (system) tự động công bố sau 15p
	-----------------------------------------------------------------	-------------------------
	|								|	|			|
	|	E4: (owner) chủ động công bố				|	|E1: cập nhật trong 15p	|
	|	-------------------					|	|	---------	|
	|	|		  |					|	|	|	|	|
	|	|		  |	E1: cập nhật trong 15p		|	|	v	|	|
	|	|	(Bài viết mới)-------------------------->(Bài viết đã được cập nhật)	|	|
	|	|	     |	\					    |		|	|	|
	|	|	     |	 \					    |		---------	|
	|	|    E3:     |	  \	E2: xoá trong 15p		    |				|
	|	|    (system)|	   ------------------------------	    |				|
	|	|    tự động |    				 \	    |E2: xoá trong 15p		|
	|	|    công bố |					  \	    |				|
	|	|    sau 15p |	E6: (admin) cập nhật		   \	    |				|
	|	|	     |	-----------------		    \	    |				|
	|	|	     |	|		|		     \	    |				|
	|	|	     v	v		| E5: (admin) xoá     v	    v				|
	|	------->(Bài viết đã được công bố)------------->(Bài viết đã được xoá)			|
	|		       ^	^								|
	|		       |	|								|
	-------------------------	-----------------------------------------------------------------
							E4: (owner) chủ động công bố


		* Bảng mô tả trạng thái:
		----------------------------------------------------------------
		|	 |   E1   |   E2   |   E3   |   E4   |   E5   |   E6   |
		|--------|--------|--------|--------|--------|--------|--------|
		|  Mới   |Cập nhật|  Xoá   |Công bố |Công bố |        |        |
		|--------|--------|--------|--------|--------|--------|--------|
		|Cập nhật|Cập nhật|  Xoá   |Công bố |Công bố |        |        |
		|--------|--------|--------|--------|--------|--------|--------|
		|Công bố |	  |        |        |        |  Xoá   |Cập nhật|
		|--------|--------|--------|--------|--------|--------|--------|
		|  Xoá   | 	  |        |        |        |        |        |
		----------------------------------------------------------------

---------------

	Ví dụ 6: sử dụng hệ thống ATM
		* Các sự kiện (events):
			E1: Đọc thẻ thành công
			E2: Không đọc được thẻ
			E3: Nhập PIN sai nhiều lần
			E4: Nhập đúng PIN
			E5: Nhấn [Huỷ]
			E6: Đã chọn giao tác
			E7: Chọn giao tác khác
			E8: Hoàn thành giao tác


		* Sơ đồ trạng thái:

						(Giữ thẻ)
						    ^
						    |
						    | E3: Nhập PIN sai nhiều lần	E7: Chọn giao tác khác
						    |					-----------------
						    |					|		|
	Đưa thẻ		 E1: Đọc thẻ thành công	    |	    E4: Nhập đúng PIN		V		|
	------->(Đọc thẻ)---------------------->(Đọc PIN)---------------------->(Chọn giao tác)		|
	vào máy	    |				  |				   |	   |		|
		    |				  | E5: Nhấn [Huỷ]		   |	   | E6: Đã	|
		    |				  |				   /	   |     chọn	|
		    |				  |    ----------------------------	   |	 giao	|
		    |				  |   /       E5: Nhấn [Huỷ]		   |	 tác	|
		    |				  |   |					   |		|
		    |  E2: Không đọc được thẻ	  v   v					   v		|
		    --------------------------->(Nhả thẻ)<----------------------(Thực thi giao tác)------
							 E8: Hoàn thành giao tác


		* Bảng mô tả trạng thái: Giữ thẻ (GT) và Nhả thẻ (NT) là trạng thái kết thúc, không dẫn đến đâu.
		-----------------------------------------------------------------------------------
		|	 		  |  E1  |  E2  |  E3  |  E4  |  E5  |  E6  |  E7  |  E8  |
		|-------------------------|------|------|------|------|------|------|------|------|
		|Đọc thẻ (ĐT)		  |  ĐP  |  NT  |      |      |      |      |      |      |
		|-------------------------|------|------|------|------|------|------|------|------|
		|Đọc PIN (ĐP)		  |      |      |  GT  | CGT  |  NT  |      |      |      |
		|-------------------------|------|------|------|------|------|------|------|------|
		|Nhả thẻ (NT)		  |      |      |      |      |      |      |      |      |
		|-------------------------|------|------|------|------|------|------|------|------|
		|Giữ thẻ (GT)		  |      |      |      |      |      |      |      |      |
		|-------------------------|------|------|------|------|------|------|------|------|
		|Chọn giao tác (CGT)	  |      |      |      |      |  NT  | TTGT |      |      |
		|-------------------------|------|------|------|------|------|------|------|------|
		|Thực thi giao tác (TTGT) |      |      |      |      |      |      | CGT  |  NT  |
		-----------------------------------------------------------------------------------

		Ta có:  
			- Xác định 9 Test Case cho trường hợp hợp lệ.
			- Xác định ngẫu nhiên các trường hợp không hợp lệ, ví dụ: Giữ thẻ -> Đọc thẻ

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT KIỂM THỬ CÁC TÌNH HUỐNG SỬ DỤNG DỰA TRÊN LƯỢC ĐỒ - USE CASE TESTING]

* Sơ đồ tình huống sử dụng (Use Case Diagram): liệt kê các tính năng mà người dùng sẽ trải nghiệm, sử dụng để phục vụ cho công việc của họ. Rất dễ hiểu đối với khách hàng vì nó tóm tắt được các tính năng cần có của hệ thống mà người dùng sẽ sử dụng dưới dạng sơ đồ, thường được sử dụng để thảo luận và xác minh với khách hàng về yêu cầu của phần mềm (software requirements).
	-> Cho biết WHO làm được WHAT với hệ thống.

---------------

** Kỹ thuật kiểm thử các trường hợp/tình huống sử dụng dựa trên lược đồ (Use Case Testing): Logic hoạt động trên lược đồ Use Case thường gần sát với logic thực tế, vì vậy, việc kiểm thử dựa trên lược đồ này sẽ giúp giảm thiểu rủi ro trong việc kiểm tra/xác nhận logic hoạt động (luồng xử lý) hoặc quy tắc nghiệp vụ.

Kỹ thuật này là nền tảng phát triển các Test Case trong cấp độ kiểm thử hệ thống (System Testing) và kiểm thử chấp nhận (Acceptance Testing) do các Use Case đại diện cho khả năng sử dụng thực tế của người dùng.

Khi kiểm thử, Tester sẽ dựa vào bản đặc tả (Use Case Description) để thiết kế Test Case cho các Use Case. Cần kiểm thử kịch bản thành công của Use Case và cho các kịch bản thay thế, ngoại lệ của Use Case.

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ ...]
[KỸ THUẬT THEO CẶP - ALL PAIRS TESTING]

** Kiểm thử theo cặp/cặp đôi (All-Pairs Testing/Pairwise Testing): dành cho những trường hợp phải kiểm thử một lượng lớn dữ liệu, giúp lấy ra những trường hợp tiêu biểu, loại bỏ sự dư thừa lặp lại. Được sử dụng trong các dự án yêu cầu cần phải kết hợp những đoạn code, trường hợp, điều kiện, tham số đầu vào rời rạc... lại với nhau để kiểm thử. (Khác với bảng quyết định vì BQĐ sẽ kiểm thử hết toàn bộ trường hợp của dữ liệu thay vì chọn ra những trường hợp tiêu biểu.)

	+ Bước 01: xác định số lượng đầu vào.

	+ Bước 02: tính tổng số trạng thái sẽ có bằng cách nhân các trường hợp lại với nhau.

	+ Bước 03: kết hợp hai giá trị đầu vào lớn nhất, tiêu biểu nhất.

	+ Bước 04: thực hiện ánh xạ các giá trị lại với nhau.

		Ví dụ: kiểm tra đăng nhập với 100 tài khoản + mật khẩu, 3 phân quyền: quản trị viên, người dùng và khách.
			- Bước 01:
				100 tên tài khoản -> 2 giá trị (đúng/sai).
				100 mật khẩu -> 2 giá trị (đúng/sai).
				3 phân quyền -> 3 giá trị.

			- Bước 02: số trường hợp: 2 x 2 x 3 => 12 trường hợp.

			- Bước 03: vì tài khoản và mật khẩu đều có chung 2 giá trị là đúng và sai -> 3 phân quyền x 2 trường hợp => 6 Test Case

			- Bước 04: kết hợp các trường hợp của các giá trị.

==============================================================================

[KIỂM THỬ ĐỘNG - DYNAMIC TESTING]
[KHÁI NIỆM KIỂM THỬ HỘP TRẮNG - WHITE BOX TESTING]

** Kiểm thử hộp trắng (Structure Based/White Box Testing): ngoài yêu cầu kiểm thử viên phải có những kiến thức về kiểm thử, còn yêu cầu phải có khả năng lập trình để thực hiện kiểm thử trên cấu trúc, thiết kế, xử lý, cách triển khai bên trong hệ thống,... để làm rõ từng đơn vị hoặc đoạn mã nguồn không phù hợp.

Vì có sự khó khăn khi về mặt chi phí và đòi hỏi phải có sự am hiểu sâu về cấu trúc bên trong của hệ thông đang kiểm thử nên thường quá trình này sẽ được thực hiện bởi chính các lập trình viên thiết kế ra mô-đun/chương trình đó.

	=> Do chính các lập trình viên thực hiện vì nó yêu cầu một người phải hiểu rõ về nghiệp vụ, phân tích được logic và toàn bộ cấu trúc mã nguồn bên trong của hệ thống.

------------------------------

** Phân loại các kỹ thuật kiểm thử hộp trắng:

	- Kiểm thử đường dẫn cơ sở (Basis Path Testing).

	- Kiểm thử cấu trúc điều khiển (Control Structure Testing).
		+ Kiểm thử luồng điều khiển (Control Flow Testing) / Bao phủ (Coverage Testing).
			* Phủ câu lệnh/dòng lệnh (Statement Coverage).
			* Phủ quyết định (Decision Coverage).
			* Phủ nhánh (Branch Coverage).
			* Phủ đường (Path Coverage).
			* Phủ điều kiện (Condition Coverage).
			* Phủ đa điều kiện (Multiple Condition Coverage - MCC).

		+ Kiểm thử luồng dữ liệu (Data Flow Testing).

		+ Kiểm thử vòng lặp (Loop Testing).

==============================================================================

[KIỂM THỬ ĐỘNG - DYNAMIC TESTING]
[KHÁI NIỆM KIỂM THỬ HỘP XÁM - GRAY BOX TESTING]

** Kiểm thử hộp xám (Gray-box Testing/Grey-box Testing): là sự kết hợp giữa kiểm thử hộp đen và hộp trắng, mục đích là để tìm kiếm các khiếm khuyết (nếu có) do cấu trúc không đúng hoặc việc sử dụng hệ thống không đúng cách.

Cho phép thấy được kiến trúc bên trong: mô hình, lược đồ thiết kế của hệ thống thông qua tài liệu, thấy được cơ sở dữ liệu bên trong và thực hiện một số truy vấn để xác nhận kết quả,... từ đó giúp cho việc chuẩn bị dữ liệu và kịch bản kiểm thử được tốt hơn.

	=> Thấy được cấu trúc bên trong nhưng lại kiểm thử theo kiểu hộp đen (đưa dữ liệu vào và kiểm tra kết quả) vì có cái nhìn sâu bên trong hệ thống.

==============================================================================

[KHÁI NIỆM KIỂM THỬ DỰA TRÊN KINH NGHIỆM - EXPERIENCE BASED TESTING]

** Kiểm thử dựa trên kinh nghiệm (Experience Based Testing): trong thực tế, không phải lúc nào nghiệp vụ mà ta kiểm thử cũng có đầy đủ các tài liệu đặc tả, nhất là khi phát triển hệ thống theo quy trình Agile. Sẽ có trường hợp các tính năng được mô tả và thiết kế bằng lời thay vì được ghi chép vào trong một tài liệu đặc tả nghiệp rõ ràng.

Không có cơ sở để kiểm thử -> kiểm thử dựa trên kinh nghiệm.
	
	=> Được sinh ra để giải quyết những vấn đề mô tả và thiết kế tính năng bằng lời thay vì được ghi chép vào trong tài liệu.

------------------------------

** Phân loại các kỹ thuật kiểm thử dựa trên kinh nghiệm:

	- Đoán lỗi (Error Guessing).

	- Kiểm thử thăm dò (Exploratory Testing).

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ DỰA TRÊN KINH NGHIỆM]
[KỸ THUẬT ĐOÁN LỖI - ERROR GUESSING]

** Kỹ thuật đoán lỗi (Error Guessing): chủ yếu dựa vào kỹ năng, kinh nghiệm, trực giác, kiến thức, sự am hiểu của kiểm thử viên về hệ thống hoặc dựa vào những dự án tương tự đã trải qua, những bug đã tìm được,... Từ đó sẽ giúp đoán được nguy cơ tìm ẩn khi đi vào vận hành trong thực tế, vì vậy, không phù hợp với người mới. Có thể giúp tìm ra những lỗi mà thậm chí không có trong Test Case (exploratory testing).

Thường được áp dụng sau khi tất cả các kỹ thuật "chính thức" đã được áp dụng.

Những Test Case đoán lỗi thường tập trung vào những điểm yếu, đáng nghi ngờ của hệ thống hoặc những khía cạnh của hệ thống đã từng tìm thấy vấn đề khi kiểm thử các hệ thống tương tự trước đây.

	-> Dự đoán nguy cơ tiềm ẩn và thiết kế Test Case tập trung vào những điểm yếu, đáng nghi ngờ của hệ thống

	Ví dụ: lỗi chia cho 0, gửi yêu cầu không kèm giá trị hoặc chứa giá trị/ký tự đặc biệt, quên xoá tài khoản test,...

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ DỰA TRÊN KINH NGHIỆM]
[KIỂM THỬ THĂM DÒ - EXPLORATORY TESTING]

** Kiểm thử thăm dò (Exploratory Testing): làm rõ hệ thống có gì, không có gì, cái nào làm việc tốt, cái nào làm việc chưa tốt để kiểm thử viên có cơ sở và đưa ra quyết định những gì cần kiểm thử tiếp theo.

Đây là kỹ thuật tiếp cận có cấu trúc kết hợp kiến thức, sự quan sát, kinh nghiệm của các kiểm thử viên để kiểm thử những chổ đặc tả yêu cầu bị thiếu, không đầy đủ (poor specifications) hoặc có nhiều áp lực thời gian thực hiện.

Kỹ thuật này tập trung thực thi kiểm thử hơn là việc lên kế hoạch kiểm thử. Việc thiết kế Test Case và thực thi Test Case được thực hiện song song, và cũng không cần một tài liệu chính quy về Test Condition, Test Case hoặc Test Script.

Kiểm thử thăm dò sẽ phát huy hiệu quả nếu được thực hiện trong các giai đoạn đầu của vòng đời phát triển phần mềm, khi mã nguồn trải qua những thay đổi nhanh chóng.

Lập trình viên sử dụng kiểm thử thăm dò để thực hiện các Unit Test, còn kiểm thử viên có thể làm quen hệ thống bằng kỹ thuật này.

	-> Đưa ra quyết định những gì cần kiểm thử tiếp theo khi thiếu đặc tả yêu cầu hoặc thời gian thực hiện, tập trung thực thi kiểm thử hơn là việc lên kế hoạch.















