**********Test scenario & Test Case**********

** Kịch bản kiểm thử (test scenario): được lập sau khi nhận được yêu cầu/tài liệu kiểm thử (test document) từ phía khách hàng. Mỗi chức năng/yêu cầu sẽ tương ứng với một kịch bản (scenario) mà trong mỗi kịch bản sẽ có nhiều tình huống (case) khác nhau.

	Ví dụ:
		- Kiểm tra chức năng đăng nhập.
		- Xác minh tính năng khôi phục.
		- Xác minh tính năng huỷ đăng nhập.

---------------------------------------------------------------------------------
|Tên mô-đun/	|ID của kịch bản|Tên của kịch		|Số lượng tình huống	|
|ID của yêu cầu	|kiểm thử	|bản kiểm thử		|kiểm thử (Test Cases)	|
|---------------|---------------|-----------------------|-----------------------|
|Mô-đun		|TS_Login001	|Kiểm tra tính năng	|	4		|
|đăng nhập	|		|đăng nhập		|			|
|---------------|---------------|-----------------------|-----------------------|
|Mô-đun		|TS_Login002	|Xác minh tính năng	|	2		|
|đăng nhập	|		|khôi phục		|			|
|---------------|---------------|-----------------------|-----------------------|
|Mô-đun		|TS_Login003	|Xác minh tính năng huỷ	|	2		|
|đăng nhập	|		|đăng nhập		|			|
---------------------------------------------------------------------------------

--------------------

** Tình huống kiểm thử (Test Case):

Là một dạng tài liệu tập hợp lại, ghi chép lại những tình huống sử dụng/kiểm thử theo dạng từng bước cụ thể liên tiếp nhau (step by step) đi kèm với dữ liệu để kiểm tra tính đúng đắn về hành vi (behavior) và chức năng (functionality) của một hệ thống.

Những tình huống kiểm thử này được thực thi để tìm ra lỗi cho một test scenario, với mục đích kiểm tra/xác minh (verify) tính năng cụ thể của hệ thống đúng hay sai (so với yêu cầu, xử lý kết quả), kết quả trả về là pass hay failed.

Cần đảm bảo Test Case đã bao gồm hết tất cả các tình huống vì một chức năng có thể có nhiều tình huống xảy ra (thành công, thất bại do vô ý và thất bại trong nhiều lần do cố tình phá) để chứng minh rằng tính năng hoạt động đúng như mô tả và thiết kế.

	Ví dụ: Trong test scenario - Kiểm tra chức năng đăng nhập
		- Kiểm tra phản hồi khi nhập tài khoản và mật khẩu hợp lệ.
		- Kiểm tra phản hồi khi nhập tài khoản và mật khẩu không hợp lệ.
		- Kiểm tra phản hồi khi bỏ trống, không nhập nhập tài khoản và mật khẩu.

--------------------

** Vậy, cần bao nhiêu test case thì đủ cho một test scenario?
Trong số bảy nguyên lý kiểm thử phần mềm, có một nguyên lý nói "Không thể kiểm thử hết toàn bộ (Exhaustive testing is not possible)". Vì vậy, cần phải có cách để dừng việc viết test case mà vẫn tự tin kết luận rằng hệ thống có thể sử dụng ổn định.

=> Áp dụng thêm những kỹ thuật thiết kế test case (hộp trắng, hộp đen, hộp xám, kinh nghiệm,...) để tăng tính hiệu quả bằng cách giới hạn số test case phải viết nhưng vẫn đảm bảo thử qua tất cả các trường hợp cần phải thử.

--------------------

* Cấu trúc cần có của một Test Case:
	[Thiết kế Test Case - Do QC thực hiện, kết quả sau đó sẽ được lưu trữ trên excel, word,...]
		- ID định danh của Test Case.
		- Tên/tiêu đề Test Case.
		- Mô tả/tóm tắt Test Case.
		- Các điều kiện tiên quyết (preconditions).
		- Đầu vào: các bước/quy trình kiểm thử cụ thể (test steps/test procedures) để xác minh tính năng đúng hay sai.
		- Đầu ra mong đợi (Expected Result): kỳ vọng kết quả nhận được nếu thực hiện theo đúng các bước ở trên.

	[Thực thi/chạy Test Case - Do chính QC đã thiết kế ra hoặc QC khác thực hiện để kiểm chứng tính năng, so sánh kết quả mong đợi (expected) với thực tế (actual) được miêu tả trong Test Case]
		- Đầu ra thực tế (Actual Result): kết quả thực tế sẽ nhận được khi thực hiện theo đúng các bước ở trên.
		- Trạng thái/kết quả kiểm thử (status/test result) so với kết quả mong đợi: PASS hoặc FAIL.

* Tuỳ chọn: có thể có hoặc không, ví dụ: tính năng [Quên mật khẩu] không cần có dữ liệu kiểm thử.
	- Kịch bản kiểm thử (test scenario)
	- Độ ưu tiên (từ 0 -> 4 hoặc Low, Medium, High, Critical).
	- Bộ dữ liệu chuẩn bị cho việc kiểm thử.
	- Các tham số kiểm thử.
	- Loại tình huống kiểm thử.
	- Có đủ điều kiện để kiểm thử tự động.
	- Các trạng thái khác ngoài pass và fail (chưa thực thi, bị ngưng,...).
	- Kết quả trả về thực tế.
	- Ghi chú/bình luận.
	- Thông tin môi trường kiểm thử.
	- Ngày thực hiện kiểm thử.
	- Phiên bản của hệ thống/website.
	- Thiết bị.
	- ID của lỗi (bug).

|Số định danh/ID Test Case| |Tên Test Case| |Điều kiện tiên quyết| |Các bước thực hiện kiểm thử| |Dữ liệu kiểm thử| |Kết quả mong muốn| |Kết quả thực thế|

	Ví dụ:
		- Số định danh/ID Test Case: TC_Login001
		- Tên Test Case: Kiểm tra tính năng đăng nhập
		- Điều kiện tiên quyết: truy cập thành công vào website
		- Các bước thực hiện kiểm thử:
					01. Truy cập vào trang chủ
					02. Nhấn vào menu [Tài khoản của tôi]
					03. Chọn tính năng [Đăng nhập]
					04. Nhập tài khoản và mật khẩu hợp lệ
					05. Nhấn nút [Đăng nhập]
		- Dữ liệu kiểm thử:
					Tài khoản: a@a.com
					Mật khẩu: Abc!@#456
		- Kết quả mong muốn: Người dùng có thể đăng nhập vào hệ thống
		- Kết quả thực thế: Hiện thông báo đăng nhập không thành công

--------------------

** Kỹ năng viết đặc tả Test Case (tài liệu đặc tả tình huống kiểm thử):

	- Đặt tên, định danh Test Case: đặt làm sao mà khi đọc tên là biết ý đồ của Test Case, đặt tên Test Case theo mô-đun, theo chức năng kiểm thử.
		Ví dụ: TC_Register, TC_Login.

	- Mô tả Test Case: nên có mô tả song song với các bước thực hiện kiểm thử (test step) để giải thích tóm tắt Test Case sẽ làm những công việc gì.
		Ví dụ 1: kiểm tra sự phản hồi khi nhập email và mật khẩu không hợp lệ.
		Ví dụ 2: đến trang chủ, nhập dữ liệu và nhấn nút.

	- Tránh lặp lại Test Case: kiểm tra xem những Test Case đó đã từng có trong hệ thống hay chưa, nếu có thì nên dùng lại, cập nhật và cải tiến hơn là viết lại từ đầu.

	- Tránh đoán mò: dựa vào đặc tả mà viết.

	- Thường xuyên cập nhật Test Case: nên cập nhật lại Test Case mỗi khi hệ thống có cập nhật, thay đổi, nâng cấp.

	- Đánh giá chéo: các kiểm thử viên kiểm thử chéo cho nhau.

--------------------

Để quản lý được Test Case, ta có thể sử dụng Excel, Word. Nhưng nếu số lượng Test Case quá nhiều, song song với đó là quản lý việc kiểm thử và kết quả kiểm thử, các lần kiểm thử khác nhau,... thì các công cụ truyền thống sẽ dần bộc lộ hạn chế.

Lúc này, cần phải sử dụng thêm các phần mềm chuyên dụng cho việc quản lý, lưu trữ các Test Case, kết quả kiểm thử, các lần kiểm thử, biểu đồ, quản lý nhóm và phân chia công việc.

Các phần mềm để quản lý các Test Case: TestRail, TestMonitor...

--------------------

Test condition: các trạng thái dữ liệu, ví dụ: không có tài khoản, mật khẩu
Test suite: tập hợp của các Test Case

--------------------

Khi đã có hệ thống rồi, ta sẽ không còn kiểm thử ở các cấp độ (level, mức hoàn thiện của hệ thống) mà chuyển sang dạng (type) kiểm thử chức năng để xem các chức năng có chạy đúng hay không.
	- Functional testing: 
	- Non-functional testing: 

================================================================================

Sau thiết kế Test Case là giai đoạn thực thi/chạy Test Case, giai đoạn này có thể do chính QC đã thiết kế ra Test Case hoặc giao cho một QC khác thực hiện theo những bước đã được mô tả trong Test Case để lấy được kết quả thực tế (actual result), từ đó so sánh kết quả thực tế (actual result) với kết quả mong đợi (expected result), mục đích là để xác minh tính năng chạy đúng hay sai.

Có hai cách để thực thi test case:

	* Kiểm thử thủ công (Manual Testing): tự tay (thủ công) mở hệ thống lên, làm theo các bước đã được mô tả trong test case, dùng mắt thường để nhìn kết quả và tự kết luận đúng hay sai so với kết quả mong đợi được viết trong test case.
		-> Dùng sức người để thực thi và kiểm tra hệ thống.

	* Kiểm thử tự động (Automation/Automated Testing): con người sử dụng các công cụ, các thư viện để thiết kế code/kịch bản kiểm thử tự động (Test Script), nhằm mục đích nhờ máy tính tự động hoá việc thực thi các test case (tự động mở, nhập dữ liệu, nhấn nút, xem kết quả, tự so sánh và báo kết quả đúng sai). Cách này hiệu quả trong việc kiểm thử hồi quy (Regression Testing).
		-> Con người viết code để máy tính giả lập lại các hành động và thay con người kiểm thử hệ thống và kết luận.

		Có nhiều cách để viết kịch bản kiểm thử tự động (Test Script):
			- Chủ động lập trình để thực hiện các thao tác.
			- Ghi hình lại các bước dạng kịch bản (Record/Playback-Replay): dùng một phần mềm đã được viết sẵn chuyên phục vụ cho việc ghi hình các bước/các câu lệnh/các khung hình (không phải ghi màn hình dạng video) để tự động hoá thao tác thực thi các test case. Sau khi ghi hình xong, sẽ in ra một tập các bước đã thực hiện và cho phép can thiệp, chỉnh sửa lại các bước nếu cần. Có thể chuyển thành ngôn ngữ lập trình (Java, C#, Python,...) và cho phép chỉnh sửa lại theo phong cách lập trình.
				-> Functional Automation Testing Tool: Katalon, Telerik, Ranorex, TestComplete... => Dựa trên framework kiểm thử tự động mở nguồn mở (test automation framework) Selenium (web), Appium (desktop),...

--------------------

Lỗi (Bug/Defect) xảy ra rong quá trình QC thực thi/chạy Test Case, khi hệ thống hoạt động không được như dự kiến: kết quả thực tế (actual result) khác với kết quả mong đợi (expected result), xuất hiện ngoại lệ, null,... -> Test Case Fail

Lúc này, QC sẽ ghi lại các thao tác/các bước để làm sao xảy ra được lỗi và có thể chụp lại màn hình để làm bằng chứng, sau đó lưu lại vào một công cụ riêng chuyên được dùng để quản lý lỗi như Bugzilla, hoặc lưu vào các công cụ quản lý dự án/quản lý các yêu cầu có kết hợp quản lý bug như Jira. Các công cụ thường này có liên thông với nhau bằng cách chuyển đổi thông tin qua lại nhờ API.

	-> Lưu lại những "bằng chứng" này lên một nơi được gọi là Bug Database, Bug Tracker, thuật ngữ trong nghề gọi là "Log Bug".

Lập trình viên sẽ đọc mô tả về lỗi, tự tái hiện/dựng lại lỗi (Re-produce Bug) để xác nhận hoặc loại bỏ (reject) -> Quá trình fix bug bắt đầu.

================================================================================

