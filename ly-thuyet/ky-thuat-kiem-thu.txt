[KHÁI NIỆM KIỂM THỬ TĨNH - STATIC TESTING]

** Kiểm thử tĩnh (Static Testing)

==============================================================================

[KHÁI NIỆM KIỂM THỬ ĐỘNG - DYNAMIC TESTING]

** Kiểm thử động (Dynamic Testing):
	- Kiểm thử hộp đen/dựa trên đặc tả yêu cầu (Specification Based/Behavior Based/Black Box Testing).
		-> Kiểm thử chức năng (Functional Testing)
	- Kiểm thử hộp trắng (Structure Based Testing/White Box Testing)
		-> Kiểm thử cấu trúc (Structural Testing)

		=> Kiểm thử hộp xám (Gray-box Testing/Grey-box Testing)
			= Kiểm thử hộp đen + Kiểm thử hộp trắng

==============================================================================

[BẢNG SO SÁNH GIỮA KIỂM THỬ TĨNH & KIỂM THỬ ĐỘNG]

So sánh giữa kiểm thử tĩnh và động:

-----------------------------------------------------------------
|	Kiểm thử tĩnh		|	Kiểm thử động		|
|-------------------------------|-------------------------------|
|Xem mã nguồn, không thực thi	|Thực thi mã nguồn		|
|-------------------------------|-------------------------------|
|Thực hiện trong quy trình	|Thực hiện trong quy trình	|
|Verfication			|Validation			|
|-------------------------------|-------------------------------|
|Code inspection, walk through,	|Black-box testing,		|
|code reviews, desk checking	|white-box testing		|
|---------------------------------------------------------------|

==============================================================================

[KIỂM THỬ ĐỘNG - DYNAMIC TESTING]
[KHÁI NIỆM KIỂM THỬ HỘP ĐEN - BLACK BOX TESTING]

** Kiểm thử hộp đen/dựa trên đặc tả yêu cầu (Requirements-based Testing/Specification Based Testing/Behavior Based Testing/Black Box Testing):

	- Khi thiết kế sẽ phải dựa theo bảng đặc tả yêu cầu phần mềm (Software Requirements Specification - SRS) để thiết kế vì có thể đây là thông tin duy nhất làm cơ sở cho việc kiểm thử.

	- Khi thực thi kiểm thử thì lúc này sẽ không cần phải quan tâm đến cấu trúc, thiết kế, xử lý, cách triển khai bên trong hệ thống, công nghệ, dịch vụ mà hệ thống đang sử dụng,... mà chỉ cần có dữ liệu đầu vào và dữ liệu đầu ra. Xét xem liệu dữ liệu đầu vào (input/expected result) và dữ liệu đầu ra mong muốn (output/actual result) có khớp với nhau hay không để từ đó đi đến kết luận Test Case đó PASS hay FAIL, chứ không cần quan tâm hệ thống sẽ phải xử lý thế nào để có được đầu ra.

		=> Đóng vai trò như người dùng cuối (end-user) để sử dụng hệ thống trong giai đoạn đã hoàn thiện hoặc gần hoàn thiện (tương tác thông qua giao diện người dùng), sau đó kết hợp và so sánh với bảng đặc tả yêu cầu để đánh giá/kết luận rằng đầu ra (ouput) có khớp với đầu vào (input) hay không.
			-> Kiểm thử những gì mà hệ thống làm được (WHAT),
				không quan tâm làm như thế nào (HOW).

------------------------------

[ƯU ĐIỂM VÀ KHUYẾT ĐIỂM]

** Ưu điểm:
	- Không cần truy cập mã nguồn, không cần có kiến thức chuyên sâu về lập trình mà chỉ cần biết một chút về logic xử lý.
	- Tách biệt khung nhìn (cách nhìn nhận vấn đề) của người dùng (về trải nghiệm tình năng) và lập trình viên.
	- Nhiều người có thể tham gia kiểm thử.

** Khuyết điểm:
	- Không hiệu quả do không thấy được logic xử lý bên trong của hệ thống.
	- Khó khăn trong việc thiết kế Test Case, có thể dẫn đến thiết kế không đầy đủ đối với những người thiếu kinh nghiệm.
	- Khó phủ hết các trường hợp cụ thể nếu chưa biết đến các kỹ thuật thiết kế Test Case.
	- Không có định hướng kiểm thử rõ ràng.

------------------------------

[QUY TRÌNH THỰC HIỆN KIỂM THỬ HỘP ĐEN]

** Các bước/quy trình để thực hiện kiểm thử hộp đen:

	Bước 01: Phân tích các đặc tả chức năng của các thành phần hệ thống.
	Bước 02: Thiết kế Test Case để kiểm thử.
	Bước 03: Thực thi các Test Case để kiểm thử.
	Bước 04: So sánh kết quả đạt được (actual result) với kết quả mong muốn (expected result) trong từng Test Case.
	Bước 05: Lập báo cáo kết quả kiểm thử.

------------------------------

[CÁC LOẠI KIỂM THỬ HỘP ĐEN]

** Phân loại các loại kiểm thử hộp đen:

	- Kiểm thử chức năng (Functional Testing): kiểm thử các chức năng/tính năng được chỉ định của hệ thống, tính an toàn của hệ thống (Security Testing), kiểm thử sự tương tác của hệ thống với các thành phần khác được chỉ định.
		-> Kiểm thử những thứ mà ta có thể tương tác được với nó.

		//Lưu ý: tính an toàn của hệ thống (Security Testing) không phải là kiểm thử phi chức năng (Non-functional Testing)//

		* Kiểm thử có sự thay đổi (change):

			+ Kiểm thử viên phát hiện ra lỗi (bug) và báo cáo cho lập trình viên để sửa lỗi, sau khi lập trình viên sửa/thay đổi trong mã nguồn xong sẽ giao cho kiểm thử viên kiểm tra lại (verify) để xác minh rằng vấn đề đã thực sự được giải quyết theo đúng với những gì đã được báo cáo.
				-> Phát hiện lỗi > Báo lỗi > Sửa lỗi > Xác minh rằng lỗi đã được sửa theo đúng yêu cầu (Retesting/Confirmation Testing).

			+ Khi tích hợp một tính năng mới vào bên trong của hệ thống, thay đổi mã nguồn, thay đổi môi trường hệ thống,... cần kiểm tra lại những tính năng, mô-đun, một tập các Test Case đã được thiết kế từ trước và có liên quan với chức năng vừa được tích hợp/thay đổi (ví dụ: đăng ký, đăng nhập, quên mật khẩu,...) để đảm bảo rằng những tính năng ấy vẫn hoạt động ổn định và không có lỗi mới phát sinh từ sự thay đổi đó. Thường áp dụng kiểm thử tự động (Automation Testing) và Unit Test để tự động hoá việc kiểm thử hồi quy (Regression Testing).
				-> Thay đổi/phát triển và tích hợp tính năng > Xác minh rằng những tính năng cũ vẫn chạy ổn định sau khi đã thay đổi/tích hợp tính năng mới (Regression Testing).

---------------

	- Kiểm thử phi chức năng (Non-functional Testing): tập trung kiểm thử các khía cạnh hành vi của hệ thống như tính tiện dụng (usability), tính khả chuyển (portability), hiệu năng hệ thống (Performance Testing) như kiểm tra tải (Load Test) hay kiểm tra sự ổn định (Stress Test),...

------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]

** Phân loại (một cách tương đối) các kỹ thuật kiểm thử hộp đen:

	- Phân vùng/lớp tương đương (Equivalence Partitioning/Equivalence Class).
	- Phân tích giá trị biên (Boundary Value Analysis).
		-> Thường được áp dụng cho các tình huống mà các đầu vào với khoảng giá trị cụ thể (ví dụ: 0-18) và ít có quan hệ ràng buộc nhau (đầu vào này và đầu vào kia không gây ảnh hưởng gì đến kết quả của bài toán, mỗi đầu vào sẽ cho ra một kết quả độc lập).

			Ví dụ: khoảng giá trị rõ ràng, đầu vào này không làm ảnh hướng đến kết quả của đầu vào khác
				Điểm trung bình >= 9 --> Xuất sắc
				Điểm trung bình >= 8 --> Giỏi
				Điểm trung bình >= 7 --> Khá

	- Bảng quyết định/bảng "nhân quả" (Decision Table Testing/Cause Effect).
	- Kiểm thử dịch chuyển/chuyển đổi trạng thái (State Transition Testing).
		-> Thường được áp dụng cho các tình huống tập trung vào logic phức tạp, phụ thuộc vào nhau và quy tắc (rule) nghiệp vụ.

			Ví dụ: ngoài xếp loại học sinh-sinh viên dựa trên điểm trung bình thì còn phải dựa trên điểm rèn luyện/hạnh kiểm.

	- Kiểm thử các trường hợp/tình huống sử dụng dựa trên lược đồ (Use Case Testing).

==============================================================================

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT PHÂN VÙNG - EQUIVALENCE PARTITIONING]

** Kỹ thuật phân vùng/lớp tương đương (Equivalence Partitioning/Equivalence Class): chia đầu vào của chương trình thành nhiều phân vùng/lớp dữ liệu, từ đó suy ra được những trường hợp cần kiểm thử. Xác định được những trường hợp tương đương hợp lệ (positive case) và không hợp lệ (negative case), giúp loại bỏ những Test Case dư thừa, chỉ chạy những Test Case có độ bao phủ cao hơn.

Chỉ áp dụng cho những bài toán có đầu vào là một miền giá trị xác định và các đầu vào độc lập, không có quan hệ mắt xích với nhau.

Nếu không áp dụng kỹ thuật phân vùng tương đương mà chỉ kiểm thử ngẫu nhiên (Random Testing) thì sẽ có trường hợp lấy quá nhiều giá trị nằm trong cùng một phân vùng, nhưng chưa có gì đảm bảo rằng những Test Case được chọn ngẫu nhiên đó sẽ phủ được hết các trường hợp có thể xảy ra vì các giá trị nằm trong cùng một phân vùng sẽ có cùng cách xử lý và cho ra cùng một kết quả.

	-> Vẫn kiểm thử ở những phân vùng hợp lệ, nhưng tập trung nhất vào những phân vùng không hợp lệ (invalid) vì lập trình viên thường hay quên phân vùng không này và chỉ đi kiểm tra ở những phân vùng hợp lệ (valid).

------------------------------

** Hai phân vùng được gọi là tương đương với nhau:
	- Khi chúng tương tự nhau (intuitive similarity).

	- Trong tài liệu đặc tả có mô tả hai phần tử nằm trong cùng một phân vùng phải có cùng một cách thức xử lý (specified as equivalent).
		Ví dụ: 0 > điểm > 10 là trường hợp không hợp lệ và sẽ có cùng cách xử lý.

	- Chúng lái/điều khiển/định hướng (drive) chương trình theo cùng đường, theo cùng hướng và làm cho nghiệp vụ thực hiện theo một logic nào đó. (chẳng hạn cùng nhánh if) (equivalent path).

	- Chúng cho cùng kết quả với những giả thiết đưa ra.

=> Chỉ cần lấy hai giá trị khác nhau nhưng nằm chung trong cùng một phân vùng đều sẽ cho ra cùng một kết quả. Nếu một giá trị đại diện trong nhóm đúng thì các giá trị còn lại trong nhóm cũng đúng và ngược lại.

------------------------------

** Ưu điểm:
	- Phân vùng tương đương là phân chia một tập các điều kiện kiểm thử thành các tập con có các giá trị tương đương nhau và kiểm thử các tập con này.
	- Giúp giảm thiếu số lượng Test Case không cần thiết, phủ được các đầu vào khi kiểm thử.
	- Có thể áp dụng tất cả mức độ kiểm thử (Unit Test, System Test, Acceptance Test,...).

------------------------------

	Ví dụ 1: Xếp loại cuối năm học sinh dựa trên điểm trung bình (ĐTB) như sau:
			[0, 5) 0 ≤ ĐTB < 5: yếu, kém
			[5, 7) 5 ≤ ĐTB < 7: trung bình
			[7, 8) 7 ≤ ĐTB < 8: khá
			[8, 9) 8 ≤ ĐTB < 9: giỏi
			[9, 10] 9 <= ĐTB <= 10: xuất sắc
		Biết điểm trung bình làm tròn 1 chữ số thập phân.

		Để kiểm thử hệ thống này, ta có thể chia thành 7 phân vùng tương đương, trong đó:
			- 5 phân vùng hợp lệ (valid): [0, 5), [5, 7), [7, 8), [8, 9), [9, 10].
			- 2 phân vùng không hợp lệ (invalid): < 0 và > 10

				  trung		      xuất
		    yếu, kém	  bình	  khá	giỏi  sắc
	<-------|---------------|-------|-----|-----|-----|------->
		0		5	7     8     9     10

	|---|--| |----------------------|----------------| |--|---|
	    |				|
	phân vùng		    phân vùng		   phân vùng
	không hợp lệ		    hợp lệ		   không hợp lệ
	(invalid)		    (valid)		   (invalid)


	-> Tester không nên chỉ test những gì trong đặc tả yêu cầu, mà còn phải nghĩ ra những thứ không được đề cập. Trong ví dụ trên, 2 phần vùng không hợp lệ (invalid) không được đề cập trong đặc tả, nhưng vẫn cần được kiểm thử.

	-> Khi thiết kế Test Case cần phải đảm bảo tất cả các phân vùng (valid & invalid) được kiểm thử qua ít nhất một lần. Ví dụ trên ít nhất cần kiểm thử 7 điểm trung bình sau đại diện với 7 phân vùng: - 5.0, 5.5, 7.5, 8.5, 9.5, 12.0

---------------

	Ví dụ 2: kiểm thử biểu mẫu đăng nhập đơn giản.
		- Chỉ được phép nhập từ 6 đến 20 ký tự.
		- Để trống hoặc không phải chữ -> Thông báo: "Tên người dùng chưa hợp lệ! Vui lòng nhập ký tự chữ".

		* Hợp lệ:
			+ Phân vùng 1: nhập giá trị hợp lệ từ 6 -> 20 ký tự.

		* Không hợp lệ:
			+ Phân vùng 2: nhập giá trị không hợp lệ < 6  ký tự.
			+ Phân vùng 3: nhập giá trị không hợp lệ > 20  ký tự.
			+ Phân vùng 4: trường hợp để trống, không nhập gì hoặc nhập ký tự không phải dạng chữ.

		=> 4 Test Case cụ thể.

			- Case 1: nhập giá trị từ 6 -> 20 ký tự => pass

			- Case 2: nhập giá trị < 6 ký tự (có thể nhập 1, 2, 3, ..., 5 ký tự) => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 3: nhập giá trị > 20 ký tự (có thể nhập 21, 22, 23,... ký tự) => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 4: để trống, không nhập gì hoặc nhập ký tự không phải dạng chữ => Hiển thị lỗi: "Tên người dùng chưa hợp lệ! Vui lòng nhập ký tự chữ".

---------------

	Ví dụ 3:

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT PHÂN TÍCH GIÁ TRỊ BIÊN - BOUNDARY VALUE ANALYSIS]

** Kỹ thuật phân tích giá trị biên (Boundary Value Analysis): là trường hợp đặc biệt của phân vùng tương đương.

	Ví dụ 1: kiểm thử biểu mẫu đăng nhập đơn giản
		=> Phân vùng giữ nguyên nhưng có sự thay đổi về Test Case.
 
			- Case 1: nhập giá trị với 5 ký tự => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 2: nhập giá trị với 6 ký tự => pass

			- Case 3: nhập giá trị với 20 ký tự => pass

			- Case 4: nhập giá trị với 21 ký tự => Hiển thị lỗi: "Bạn chỉ được phép nhập chuỗi có độ dài từ 6 -> 20 ký tự".

			- Case 5: để trống, không nhập gì hoặc nhập ký tự không phải dạng chữ => Hiển thị lỗi: "Tên người dùng chưa hợp lệ! Vui lòng nhập ký tự chữ".

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT BẢNG QUYẾT ĐỊNH - DECISION TABLE TESTING]

** Kỹ thuật bảng quyết định/bảng "nhân quả" (Decision Table Testing/Cause Effect): dùng khi phải kết hợp các điều kiện lại với nhau, khi số lượng điều kiện cần kết hợp khá lớn, dẫn đến việc không thể nhớ được một trường hợp nào đó đã được kiểm thử hay chưa.

	+ Bước 01: xác định các chức năng cần sử dụng để kiểm thử.

	+ Bước 02: xác định những điều kiện, sau đó tách ra thành những tập con và xử lý từng tập con một.

	+ Bước 03: xác định tất cả các sự kết hợp giữa đúng và sai.

		Ví dụ: biểu mẫu đăng nhập

			- Đúng email và mật khẩu -> Trang chủ

			- Sai email và mật khẩu -> Thông báo lỗi
				+ Đúng email & mật khẩu -> Trang chủ
				+ Đúng email, sai mật khẩu -> Thông báo lỗi
				+ Sai email, đúng mật khẩu -> Thông báo lỗi
				+ Sai email, sai mật khẩu -> Thông báo lỗi

			---------------------------------------------------------
			|Điều kiện		|TH 1	|TH 2	|TH 3	|TH 4	|
			|-----------------------|-------|-------|-------|-------|
			|Email (Đ/S)		|Đúng	|Đúng	|Sai	|Sai	|
			|-----------------------|-------|-------|-------|-------|
			|Mật khẩu (Đ/S)		|Đúng	|Sai	|Đúng	|Sai	|
			|-----------------------|-------|-------|-------|-------|
			|Kết quả (Trang Chủ/Lỗi)|Tr. chủ|Lỗi	|Lỗi	|Lỗi	|
			---------------------------------------------------------

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT CHUYỂN ĐỔI TRẠNG THÁI - STATE TRANSITION TESTING]

** Kỹ thuật chuyển đổi trạng thái (State Transition Testing): khi một vài phần của hệ thống được mô tả bằng trạng thái, khi hệ thống ở một trạng thái này và chuyển sang một hệ thống khác theo một quy tác nào đó của phần mềm. Mô hình chuyển đổi sẽ bao gồm bốn phần: trạng thái, phiên chuyển đổi, sự kiện, hành động-kết quả.

	Ví dụ 1: từ trạng thái đăng nhập -> đăng nhập thành công

	Ví dụ 2: nhập mã pin
		-> đúng -> đăng nhập thành công

		-> sai -> thử lại -> sai 3 lần -> khoá thẻ

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ HỘP ĐEN]
[KỸ THUẬT KIỂM THỬ CÁC TÌNH HUỐNG SỬ DỤNG DỰA TRÊN LƯỢC ĐỒ - USE CASE TESTING]

** Kỹ thuật kiểm thử các trường hợp/tình huống sử dụng dựa trên lược đồ (Use Case Testing): lược đồ tình huống sử dụng (Use Case Diagram) rất dễ hiểu đối với khách hàng vì nó tóm tắt được các tính năng cần có của hệ thống mà người dùng sẽ sử dụng dưới dạng sơ đồ, thường được sử dụng để thảo luận với khách hàng.

Logic hoạt động trên lược đồ Use Case thường gần sát với logic thực tế, vì vậy, việc kiểm thử dựa trên lược đồ này sẽ giúp giảm thiểu rủi ro trong việc kiểm tra/xác nhận logic hoạt động.

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ ...]
[KỸ THUẬT THEO CẶP - ALL PAIRS TESTING]

** Kiểm thử theo cặp/cặp đôi (All-Pairs Testing/Pairwise Testing): dành cho những trường hợp phải kiểm thử một lượng lớn dữ liệu, giúp lấy ra những trường hợp tiêu biểu, loại bỏ sự dư thừa lặp lại. Được sử dụng trong các dự án yêu cầu cần phải kết hợp những đoạn code, trường hợp, điều kiện, tham số đầu vào rời rạc... lại với nhau để kiểm thử. (Khác với bảng quyết định vì BQĐ sẽ kiểm thử hết toàn bộ trường hợp của dữ liệu thay vì chọn ra những trường hợp tiêu biểu.)

	+ Bước 01: xác định số lượng đầu vào.

	+ Bước 02: tính tổng số trạng thái sẽ có bằng cách nhân các trường hợp lại với nhau.

	+ Bước 03: kết hợp hai giá trị đầu vào lớn nhất, tiêu biểu nhất.

	+ Bước 04: thực hiện ánh xạ các giá trị lại với nhau.

		Ví dụ: kiểm tra đăng nhập với 100 tài khoản + mật khẩu, 3 phân quyền: quản trị viên, người dùng và khách.
			- Bước 01:
				100 tên tài khoản -> 2 giá trị (đúng/sai).
				100 mật khẩu -> 2 giá trị (đúng/sai).
				3 phân quyền -> 3 giá trị.

			- Bước 02: số trường hợp: 2 x 2 x 3 => 12 trường hợp.

			- Bước 03: vì tài khoản và mật khẩu đều có chung 2 giá trị là đúng và sai -> 3 phân quyền x 2 trường hợp => 6 Test Case

			- Bước 04: kết hợp các trường hợp của các giá trị.

==============================================================================

[KIỂM THỬ ĐỘNG - DYNAMIC TESTING]
[KHÁI NIỆM KIỂM THỬ HỘP TRẮNG - WHITE BOX TESTING]

** Kiểm thử hộp trắng (Structure Based/White Box Testing): ngoài yêu cầu kiểm thử viên phải có những kiến thức về kiểm thử, còn yêu cầu phải có khả năng lập trình để thực hiện kiểm thử trên cấu trúc, thiết kế, xử lý, cách triển khai bên trong hệ thống,... để làm rõ từng đơn vị hoặc đoạn mã nguồn không phù hợp.

Vì có sự khó khăn khi về mặt chi phí và đòi hỏi phải có sự am hiểu sâu về cấu trúc bên trong của hệ thông đang kiểm thử, nên thường quá trình này sẽ được thực hiện bởi chính các lập trình viên thiết kế ra mô-đun/chương trình đó.

	=> Do chính các lập trình viên thực hiện vì nó yêu cầu một người phải hiểu rõ về nghiệp vụ, phân tích được logic và toàn bộ cấu trúc mã nguồn bên trong của hệ thống.

------------------------------

** Phân loại các kỹ thuật kiểm thử hộp trắng:

	- Kiểm thử đường dẫn cơ sở (Basis Path Testing).

	- Kiểm thử cấu trúc điều khiển (Control Structure Testing).
		+ Kiểm thử luồng điều khiển (Control Flow Testing) / Bao phủ (Coverage Testing).
			* Phủ câu lệnh/dòng lệnh (Statement Coverage).
			* Phủ quyết định (Decision Coverage).
			* Phủ nhánh (Branch Coverage).
			* Phủ đường (Path Coverage).
			* Phủ điều kiện (Condition Coverage).
			* Phủ đa điều kiện (Multiple Condition Coverage - MCC).

		+ Kiểm thử luồng dữ liệu (Data Flow Testing).

		+ Kiểm thử vòng lặp (Loop Testing).

==============================================================================

[KIỂM THỬ ĐỘNG - DYNAMIC TESTING]
[KHÁI NIỆM KIỂM THỬ HỘP XÁM - GRAY BOX TESTING]

** Kiểm thử hộp xám (Gray-box Testing/Grey-box Testing): là sự kết hợp giữa kiểm thử hộp đen và hộp trắng, mục đích là để tìm kiếm các khiếm khuyết (nếu có) do cấu trúc không đúng hoặc việc sử dụng hệ thống không đúng cách.

Cho phép thấy được kiến trúc bên trong: mô hình, lược đồ thiết kế của hệ thống thông qua tài liệu, thấy được cơ sở dữ liệu bên trong và thực hiện một số truy vấn để xác nhận kết quả,... từ đó giúp cho việc chuẩn bị dữ liệu và kịch bản kiểm thử được tốt hơn.

==============================================================================

[KHÁI NIỆM KIỂM THỬ DỰA TRÊN KINH NGHIỆM - EXPERIENCED BASED TESTING]

** Kiểm thử dựa trên kinh nghiệm (Experienced Based Testing): trong thực tế, không phải lúc nào nghiệp vụ mà ta kiểm thử cũng có đầy đủ các tài liệu mô tả. Sẽ có trường hợp các tính năng được mô tả và thiết kế bằng lời thay vì được ghi chép vào trong một tài liệu mô tả nghiệp rõ ràng.
	
	=> Được sinh ra để giải quyết những vấn đề mô tả và thiết kế tính năng bằng lời thay vì được ghi chép vào trong tài liệu.

------------------------------

** Phân loại các kỹ thuật kiểm thử dựa trên kinh nghiệm:

	- Đoán lỗi (Error Guessing).

	- Kiểm thử thăm dò (Exploratory Testing).

---------------------------------------------------------------------------

[CÁC KỸ THUẬT KIỂM THỬ DỰA TRÊN KINH NGHIỆM]
[KỸ THUẬT ĐOÁN LỖI - ERROR GUESSING]

** Kỹ thuật đoán lỗi (Error Guessing): chủ yếu dựa vào kinh nghiệm, sự am hiểu về hệ thống hoặc dựa vào những dự án đã trải qua, những bug đã tìm được,... vì vậy không phù hợp với người mới. Có thể giúp tìm ra những lỗi mà thậm chí không có trong Test Case (exploratory testing).

	Ví dụ: lỗi chia cho 0, gửi yêu cầu không kèm giá trị hoặc chứa giá trị/ký tự đặc biệt, quyên xoá tài khoản test,...



