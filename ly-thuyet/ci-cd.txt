* Agile: tập trung vào quy trình phát triển, liên tục thay đổi và cho ra sản phẩm.

-----------------------

* CI/CD: vòng đời phát triển được định nghĩa trước của phần mềm, nhấn mạnh về các công cụ để tự động hoá.

-----------------------

* DevOps: là sự kết hợp giữa nhiều triết lý văn hóa, biện pháp thực hành và công cụ giúp tăng khả năng phân phối ứng dụng và dịch vụ của một tổ chức ở tốc độ cao, giúp phát triển và cải tiến sản phẩm ở nhịp độ nhanh hơn so với các tổ chức sử dụng quy trình quản lý cơ sở hạ tầng và phát triển phần mềm truyền thống. Tốc độ này cho phép các tổ chức phục vụ khách hàng tốt hơn và cạnh tranh hiệu quả hơn trên thị trường.

Là phương pháp (văn hoá) làm việc đề cao sự hợp tác để hai giai đoạn phát triển và vận hành trở nên gần gũi với nhau hơn, giúp tối ưu hoá quy trình và nhanh chóng ra mắt sản phẩm. 

================================================================================

* Biên dịch (Building): giai đoạn biên dịch toàn bộ phần mềm (và thư viện), chuyển mã nguồn thành mã máy. Là quá trình quyết định kiến trúc (32-bit hoặc 64-bit) và hệ điều hành (Windows, Lunix, MacOS,...)

-----------------------

* Đóng gói (Packaging): giai đoạn đưa phần mềm của mình (tệp thực thi, thư viện, tệp tài nguyên, cấu trúc thư mục,...) đến người dùng cuối bằng việc tạo ra một file cài đặt (.exe,...) hoặc gói tất cả vào một file nén (.zip, .rar,...) và sẵn sàng cho giai đoạn triển khai.

-----------------------

* Triển khai (Deployment): giai đoạn xác định nơi mà phần mềm sẽ được cài đặt lên và chạy. Có thể đưa lên Internet (kèm hướng dẫn giải nén và cài đặt) để mọi người có thể tải, gửi email chứa sản phẩm đến cho khách hàng, cài đặt trực tiếp lên thiết bị cá nhân của người dùng hoặc host phần mềm lên một Server cục bộ.

----------------------------------------

** Giai địan viết code:

* IDE (Integrated Development Environment): môi trường phát triển ứng dụng, tích hợp nhiều thứ vào trong một. Mỗi trường để hỗ trợ cho việc viết code.
	- Netbeans, IntelliJ, Visual Studio,...

-----------------------

* Mã nguồn (Source code): mã hoá (code) là đưa ra các này nhưng nói về cái khác. Mã nguồn chỉ có con người hiểu, máy không hiểu.
	- Java: .java

	- C/C++:
		.c
		.cpp

	- C#: .cs

	Ví dụ: 	if ()
		for ()

-----------------------

* Biên dịch: chuyển mã nguồn thành ngôn ngữ máy (biến đổi thành mã nhị phân 0101010 - byte code/machine code/binary code/MSIL) để máy có thể hiểu được nó cần phải làm gì, lúc này phần mềm đã sẵn sàng để chạy.
	- Java: .java	-> .class

	- C/C++:
		.c	-> .obj
		.cpp	-> .o

	- C#: .cs	-> .obj, .o

	Ví dụ: 	if ()	-> Biên dịch
		for ()	   thành mã nhị phân

-----------------------

* Đóng gói: gom toàn bộ file lại thành một tập tin duy nhất để đem đi bắn, tặng,...
	- Java: .java	-> .class		-> .apk, .war, .jar

	- C/C++:
		.c	-> .obj			-> .exe (chứa hàm main để chạy)
		.cpp	-> .o			-> .dll (thư viện để hỗ trợ cho .exe)

	- C#: .cs	-> .obj, .o		-> .exe, .dll

	Ví dụ: 	if ()	-> Biên dịch
		for ()	   thành mã nhị phân

================================================================================

[ĐỊNH NGHĨA QUY TRÌNH CI/CD]

** CI/CD (Continuous Integration/Continuous Delivery): quá trình làm việc liên tục và tự động của phần mềm khi có bất kỳ ai đưa code lên Server, được tích hợp vào trong vòng đời phát triển của phần mềm (Software Development Life Cycle - SDLC). Áp dụng triệt để CI/CD sẽ tạo thuận lợi cho quá trình phát triển phần mềm theo hướng linh hoạt (Agile), vì khách hàng có thể nhanh chóng được tiếp cận, trải nghiệm vừa đưa ra những phản hồi về những sự thay đổi.

Phù hợp khi làm trong dự án với nhiều team và nhiều thành viên: Jenkins, TeamCity, Azure DevOps.

-----------------------

* CI (Continuous Integration): là kỹ thuật được áp dụng khi các thành viên trong nhóm liên tục (tần suất mỗi ngày hoặc mỗi giờ) hợp nhất (integrate/merge) công việc (mã nguồn) của họ vào kho lưu trữ chung.

Trong lịch sử, tích hợp là một hoạt động kỹ thuật tốn kém. Vì vậy, để tránh sự cố, CI nhấn mạnh các công cụ tự động hóa nhằm thúc đẩy quá trình biên dịch và kiểm thử tự động. Mục tiêu chính là tìm và khắc phục lỗi nhanh hơn, cải thiện chất lượng phần mềm, giảm thời gian bỏ ra để thẩm định và phát hành các bản cập nhật mới.

-----------------------

* CD (Continuous Delivery): là quá trình tự động đóng gói và triển khai những gì mà CI đã biên dịch và kiểm thử. Những thay đổi trong mã nguồn (dù là nhỏ nhất) đều sẽ được tự động đóng gói và kiểm thử. Áp dụng CD để biên dịch, cấu hình, đóng gói và điều phối việc triển khai của phần mềm theo cách một cách nào đó để nó có thể được phát hành bất cứ lúc nào với mức chi phí thấp và tính tự động hóa cao.

----------------------------------------

** Ưu điểm:
	- Hạn chế lỗi khi commit code lên vì CI/CD sẽ tự động kiểm tra đoạn code do ta vừa commit, nếu hợp lệ mới cho phép commit.
	- Tự động chạy một bộ test nào đó để xem code vừa được commit có ảnh hưởng đến những tính năng khác.
	- Tự động build ứng dụng.

================================================================================

[QUY TRÌNH CONTINUOUS INTEGRATION (CI)]

* Server trung tâm (chung) chứa code: GitHub, GitLab, Bitbucket,...

* Kiểm tra code: SonarQube,...

* Tự động biên dịch và đóng gói: Jenkins, GitHub Action, Bamboo, TeamCity, Jarvis,...

* Staging Server: Server trung gian để triển khai hệ thống, Server chứa hệ thống đã được đóng gói (.exe, .war).

----------------------------------------

Hai lập trình viên cùng làm một dự án:

Dev 1:
	- Code trên máy local.
	- Thực hiện Unit Test.
				Đẩy code lên
				------------>
						Server trung tâm chứa code.
						Muốn code lên Server phải ổn
						thì phải gài thêm 1 số công cụ
						để tự động kiểm tra code:
							- Kiểm tra quy chuẩn viết code,...
							- Tự động chạy các Unit Test.

						1. Ổn (xanh) -----> Đóng gói (.exe, .war)

				Tự động đẩy code
				<------------

	Server khác (Staging Server)

						2. Không ổn (đỏ): Tự động gửi email cho dev để báo.


Dev 2:
	- Code trên máy local.
	- Thực hiện Unit Test.
				Đẩy code lên
				------------>
						...

================================================================================

[CÁCH CHƠI VỚI CI]

** Cách 00: sử dụng sức người để build hệ thống và kiểm tra code.

	- Khi các thành viên trong nhóm đẩy code lên Server thì phải thông báo cho một ai đó, người này sẽ kéo hết code về máy và build hệ thống thủ công, chạy kiểm thử để ra được màu Xanh-Đỏ.
		+ Nếu xanh: đóng gói hệ thống thành file .jar, .war,... và upload lên máy test để QC kiểm tra.
		+ Nếu đỏ: gửi email thông báo.

----------------------------------------

** Cách 01: sử dụng một Server riêng để build hệ thống và kiểm tra code.

	- Server có cài ứng dụng để tự động kéo code từ GitHub, GitLab, Bitbucket... về.

	- Để build được hệ thống (được viết bằng Java), Server cần có:
		+ JDK.
		+ JUnit.
		+ Công cụ Ant/Maven để biên dịch và đóng gói hệ thống.
		+ Jenkins, Bamboo, TeamCity, Jarvis,...

	- Mỗi khi có ai đẩy code lên thì GitHub sẽ báo cho các công cụ tự động biên dịch và đóng gói.

	- Các công cụ tự động biên dịch và đóng gói sẽ tự kéo code về và chạy test.
		+ Nếu xanh: đóng gói hệ thống thành file .jar, .war,... và upload lên máy test để QC kiểm tra.
		+ Nếu đỏ: gửi email thông báo.

----------------------------------------

** Cách 02: sử dụng Microsoft Azure.
	- Trên nền tảng này đã có toàn bộ công cụ cần thiết, ta chỉ việc khai báo và cấu hình (Azure DevOps).

----------------------------------------

** Cách 03: sử dụng GitHub Actions.

	- CI đã được tích hợp sẵn vào GitHub, muốn sử dụng thì ta chỉ cần khai báo thứ ta cần trên GitHub Actions bằng các câu lệnh được viết thuần bằng chữ.

	- Khai báo, chỉ cho GitHub Actions tự động thực hiện (dành cho Java): JDK, Ant, nơi lưu file .jar, .war, đẩy sang Server khác,...
		+ File cấu hình này được viết bằng một ngôn ngữ đánh dấu (markup language) là YAML (.yml). Đây là loại ngôn ngữ lightweight, sử dụng thẻ tên và thụt lề (giống Python).
		+ Lưu những lệnh cấu hình này vào trong 1 file và cất trong kho chứa code.

----------------------------------------

Trên GitHub có Webhooks, là một cơ chế cho phép lắng nghe (hoạt động theo kiểu Web Service) để các công cụ độc lập có thể tự động gọi nhau, khi trên GitHub có bất kỳ sự thay đổi nào thì nó sẽ gửi một thông điệp POST sang công cụ độc lập.

================================================================================

[THỰC HIỆN QUY TRÌNH CI TRÊN MÁY CỤC BỘ]
(bằng Java)

* JDK\bin
	- java.exe: máy ảo Java. Vì máy ảo chỉ hiểu file .class nên muốn chạy thì phải cần javac.exe để biến dịch trước.
	- javac.exe: trình biên dịch (biến file .jar -> .class)
	- jar.exe: giúp đóng gói thành file .jar (do Ant và Maven lo).

* Hai công cụ đặc biệt giúp đóng gói hệ thống thành .apk

Ant, Maven	-> .jar, .war

----------------------------------------

Mặc định khi biên dịch (build .class) và quá trình đói gói (dist .war, .jar, .ear) không quan tâm code có được Unit Test hay không, nếu có thì cũng không quan tâm Unit Test đang xanh hay đỏ.
	-> Chỉ tập trung vào biên dịch và đóng gói app.

Khi Unit Test đang đỏ tức là có vấn đề về code thì không nên biên dịch và đóng gói app. Vì vậy, cần phải cá nhân hoá lại quá trình bằng cách bắt tiến trình ra file .jar phải đi qua bộ test và test xanh thì mới ra được file .jar.

Trong Java, chỉ quan tâm 2 thư mục src và test vì khi đưa lên Server vì 2 thư mục này có thể tạo ra 2 thư mục build và dist bất cứ lúc nào.

Trong NetBeans, khi nhấn Shift + F11 (Clean & Build), thực chất thì Netbeans sẽ không làm gì mà sẽ gọi 2 thằng khác làm giùm (gọi JDK và Javac.exe), nó sẽ đọc tập tin build-impl.xml (Ant) trong thư mục nbproject để biết phải làm gì tiếp theo. Đây cũng là nơi để chỉnh sửa quy trình build bằng cách thêm test vào <target depends="init,compile,test,...>.

================================================================================

File cài đặt chỉ là file gói bên ngoài, bản chất bên trong cũng là file nén và nén các file .exe, .apk, .jar,... cùng các file ghi chú thông tin, chào mừng, điều khoản,... thành file setup.exe/setup.msi bằng cách sử dụng các phần mềm như InstallShield, Windows Installer,...



-------------------



















