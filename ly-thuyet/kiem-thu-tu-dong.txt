[ĐỊNH NGHĨA KIỂM THỬ TỰ ĐỘNG]

** Kiểm thử tự động (Automation/Automated Testing): con người sử dụng các phần mềm khác, công cụ, các thư viện,... để thiết kế sẵn kịch bản kiểm thử tự động (Test Script/Test Procedure) và để phần thực thi lại cho máy tính vì đôi khi sẽ có những kịch bản lặp lại nhiều lần đến mức gây nhàm chán, tốn thời gian và chi phí nếu con người tự thực hiện kiểm thử thủ công.
	-> Con người viết code để máy tính giả lập lại các hành động và thay con người kiểm thử hệ thống và kết luận.

	Ví dụ 1: kiểm thử thủ công việc đăng nhập với 100 tài khoản khác nhau.
	Ví dụ 2: kiểm thử về đa ngôn ngữ trên một hệ thống.
		-> Đã hiểu quy trình kiểm thử thủ công => Thiết kế kiểm thử tự động

Máy tính sẽ thay mặt con người tự động hoá việc thực thi các Test Case (tự động mở, nhập dữ liệu, nhấn nút, xem kết quả, tự so sánh và báo kết quả đúng sai thông qua email,...). Có thể thực thi kiểm thử tự động định kỳ theo một khung giờ cố định mà không cần đến sự can thiệp và giám sát của con người. Cách này hiệu quả trong việc kiểm thử hồi quy (Regression Testing).

------------------------------

** Có nhiều cách để viết kịch bản kiểm thử tự động (Test Script):
	- Chủ động lập trình để tự động thực hiện các thao tác.
	- Ghi hình lại các bước dạng kịch bản và tự động theo tác lại (Record & Replay/Playback).

========================================================================

[CÁC BƯỚC ĐỂ KIỂM THỬ TỰ ĐỘNG]

* Các bước cơ bản để kiểm thử tự động:
	01. Xác định các vùng/mục tiêu trong phần mềm để kiểm thử tự động (Biết được mình đang cần kiểm thử cái gì).
	02. Chọn công cụ thích hợp để tự động hoá kiểm thử (Sử dụng các công cụ, nền tảng và ngôn ngữ lập trình nào để kiểm thử API, UI, Mobile,...).
	03. Lập trình/viết kịch bản kiểm thử (Test Script).
	04. Tạo ra tập hợp các trường hợp kiểm thử (Test Suite), kịch bản kiểm thử hoàn chỉnh (Test Scenario).
	05. Thực thi các kịch bản kiểm thử (Test Script).
	06. Xây dựng báo cáo kết quả.
	07. Phân tích để tìm lỗi hoặc vấn đề về hiệu năng.

========================================================================

[NHỮNG LƯU Ý KHI KIỂM THỬ TỰ ĐỘNG]

* Nên áp dụng kiểm thử tự động cho:
	- Các dự án lớn và trọng điểm, những dự án dài hạn và tốn nguồn nhân lực.
	- Những dự án yêu cầu kiểm thử thường xuyên trong cùng một lĩnh vực (kiểm thử lặp lại một tính năng).
	- Những yêu cầu không thường xuyên thay đổi.
	- Kiểm thử hiệu năng (Performance Testing): giả lập nhiều người sử dụng cùng một lúc,...
	- Kiểm tra tính ổn định của phần mềm trên quan điểm của kiểm thử thủ công.
	- Tính khả dụng của thời gian.
	- So sánh những điểm ảnh (pixel), màu sắc,... của hình ảnh.
	- So sánh những bảng tính (spreadsheets) với rất nhiều dòng và cột.
	- Chạy song song trên nhiều trình duyệt cùng một lúc.

	* Ưu tiên áp dụng cho:
		+ Những Test Case passed (Positive).
		+ Test theo thứ tự, ví dụ: đăng ký > đăng nhập > tìm kiếm > chọn mua > thanh toán.
		+ Kiểm thử giao diện (UI): phân trang, ô nhập, nút nhấn,...
		+ Kiểm thử hiệu năng (Performance Testing).

------------------------------

* Những Test Case có thể kiểm thử tự động:
	- Rủi ro cao - các Test Case quan trọng.
	- Những Test Case được thực hiện nhiều lần.
	- Những Test Case khó thực hiện thủ công.
	- Những Test Case tốn thời gian của con người.

------------------------------

* Những Test Case không phù hợp để kiểm thử tự động:
	- Những Test Case được thiết kế mới và chưa được thực hiện thủ công ít nhất một lần.
	- Những Test Case có các yêu cầu thường xuyên thay đổi (do khách hàng chưa quyết định được tính năng, hay thay đổi yêu cầu phần mềm,...).
	- Những Test Case được thực hiện đột xuất, không có kế hoạch, kịch bản hay tài liệu tham khảo (ad-hoc).
	- Những Test Case liên tục failed.
	- Những hệ thống áp dụng quá nhiều thiết kế đồ hoạ (hiệu ứng).

------------------------------

* Ưu và nhược điểm của kiểm thử tự động:
	- Ưu điểm:
		+ Cải thiện hiệu quả: nhanh hơn kiểm thử thủ công.
		+ Cải thiện độ chính xác: đáng tin cậy hơn con người do bộ dữ liệu kiểm thử đã được chuẩn bị từ trước và đã qua quá trình kiểm tra trước khi đưa vào tự động.
		+ Tính tái sử dụng cao: nếu xây dựng được một bộ framework cho riêng mình thì có thể tái sử dụng trong nhiều dự án có cùng cấu trúc (thường do một công ty thiết kế dựa trên một mẫu sẵn có).
		+ Tiết kiệm được thời gian: có thể hoạt động 24/24 trong khi con người chỉ có thể bằng 50% hoặc 33% về thời gian hoạt động.
		+ Hỗ trợ thực thi Các Test Case một cách lặp lại: có thể được thực hiện lại nhiều lần trên các loại trình duyệt khác nhau.

	- Nhược điểm:
		+ Tốn chi phí để trả cho các công cụ tự động hoá chuyên nghiệp (phí bản quyền) và thuê nhân viên có am hiểu về kiểm thử tự động, tốn phí quản lý và bảo trì, tìm hiểu, huấn luyện/đào tạo/giáo dục,...
		+ Mất thời gian, công sức để tạo mới và chỉnh sửa Test Script.
		+ Không phải Test Case nào cũng phù hợp để kiểm thử tự động. Ví dụ: các Test Csse về UI,...

------------------------------

* Lưu ý khi lựa chọn kiểm thử tự động:
	- Chi phí khởi đầu (thuê nhân viên, mua công cụ,...) cho kiểm thử tự động rất cao.
	- Kiểm thử tự động không phải là 100%, có một số trường hợp không thể kiểm thử tự động.
	- Không kiểm thử tự động với trường hợp UI không cố định.
	- Người kiểm thử tự động nên có kiến thức lập trình tốt.

========================================================================

[CÁC CÔNG CỤ KIỂM THỬ TỰ ĐỘNG]

** Các công cụ hỗ trợ kiểm thử tự động hai trong một - Studio (Functional Automation Testing Tools): Katalon, Telerik, Ranorex, TestComplete, Watir, HP QTP/UFT...

	-> Dựa trên framework kiểm thử tự động mã nguồn mở (test automation framework) Selenium (web), Appium (desktop, mobile),...

	-> Lưu lại các phần tử website dưới dạng đối tượng trong Element Repository (Object Repository) và cho phép tái sử dụng trong các Test Case khác nhau của cùng một dự án.

------------------------------

** Selenium Suite:
	1. Selenium IDE.
	2. Selenium WebDriver + RC.
	3. Selenium Grid.

========================================================================

[CÁCH THIẾT KẾ KỊCH BẢN KIỂM THỬ TỰ ĐỘNG - TEST SCRIPT]

** Có nhiều cách để viết kịch bản kiểm thử tự động (Test Script):
	- Chủ động lập trình bằng cách sử dụng Selenium, WebDriver và kiến thức lập trình hướng đối tượng (OOP) để viết Test Script (Page Object Model - POM).
		-> Sử dụng thư viện lập trình Selenium và ngôn ngữ lập trình.

	- Ghi hình lại các bước dạng kịch bản (Linear: Record & Replay/Playback): dùng một phần mềm đã được viết sẵn chuyên phục vụ cho việc ghi hình các bước (không phải ghi màn hình dạng video) để tự động hoá thao tác thực thi các Test Case ở mức cơ bản.
Sau khi ghi hình xong, sẽ in ra một tập các bước đã thực hiện và cho phép can thiệp, chỉnh sửa lại các bước. Có thể chuyển thành ngôn ngữ lập trình (Java, C#, Python,...) và cho phép chỉnh sửa lại theo phong cách lập trình nếu cần thiết.
		-> Sử dụng công cụ đồ hoạ Selenium IDE.
		-> Sử dụng công cụ record + code: Katalon (keyword driven),...

========================================================================

[SỬ DỤNG WEBDRIVER ĐỂ THIẾT KẾ KỊCH BẢN KIỂM THỬ TỰ ĐỘNG]

Có nhiều hãng thiết kế trình duyệt web nhưng tất cả đều tuân theo chuẩn do tổ chức tiêu chuẩn quốc tế chính cho World Wide Web (World Wide Web Consortium - W3C) đưa ra. Trong bộ tiêu chuẩn khi thiết kế trình duyệt có một tiêu chuẩn nói rằng: "mọi trình duyệt nên cho phép lập trình viên điều khiển được hoạt động của trình duyệt thông qua code" (mặc định sẽ được người dùng điều khiển thông qua các ô nhập, nút nhấn, mở tab mới, lưu dấu trang,...) để giúp cho QC tự động hoá quá trình kiểm thử website.

Lúc này, trình duyệt chính là một đối tượng (object) cung cấp các hàm cho các lập trình viên.

	-> Cho phép code đóng vai người dùng để sử dụng trình duyệt.

------------------------------

** Quy trình viết kịch bản kiểm thử tự động bằng việc chủ động lập trình:

	Python			Selenium     Firefox WebDriver	FireFox
	Java			Client	     ChromeDriver	Chrome
	C#			Library	     OperaDriver	Opera

|Ngôn ngữ lập trình|--->|Thư viện lập trình|--->|WebDriver|--->|Trình duyệt|
							^		|
					    JSON	|_______________|
			Wire Protocol Over HTTP		HTTP over HTTP Server

------------------------------

** Thư viện lập trình (Selenium): tập hợp các class với các phương thức/hàm được đóng gói với một định dạng cụ thể (.jar, .dll, .exe,...) nhằm cung cấp các lệnh để lập trình viên kết nối với WebDriver.

----------------

** WebDriver: ứng dụng/cầu nối trung gian (người em song sinh với trình duyệt) vì theo quy chuẩn của W3C thì trình duyệt phải được thiết kế mở. Bao gồm: ChromeDriver, OperaDriver, Firefox WebDriver,... Đại diện cho một đối tượng (object) trình duyệt và cung cấp các hàm.

Bộ quy chuẩn chung được tách riêng cho khỏi trình duyệt. Là đoạn code chạy song song với trình duyệt, có kết nối với thư viện lập trình (Selenium), từ đó cho phép ngôn ngữ lập trình (Python, Java, C#,...) can thiệp vào trình duyệt để kiểm thử web app bằng code tự động.
	-> Tập tin nhị phân biết cách giao tiếp với trình duyệt và thư viện lập trình.

========================================================================

[CÁC BƯỚC CẦN THỰC HIỆN KHI SỬ DỤNG WEBDRIVER ĐỂ THIẾT KẾ KỊCH BẢN KIỂM THỬ TỰ ĐỘNG]

** Các yêu cầu để viết kịch bản kiểm thử (Test Script):
	- Cần thư viện tương ứng: Selenium (tuỳ vào ngôn ngữ lập trình).
	- Cần có phần trung gian để kết nối với trình duyệt, thay con người điều khiển trình duyệt: WebDriver (tuỳ vào trình duyệt và phiên bản của trình duyệt).

------------------------------

** Các bước viết code (Test Script) để tự động hoá những thao tác của QC/Người dùng khi sử dụng một website (điều khiển trình duyệt) bằng Selenium WebDriver:

	Bước 01: copy file ChromeDriver.exe vào trong cùng thư mục chứa code hoặc môi trường ảo (venv - python) để dễ quản lý và sử dụng. Báo cho máy ảo biết phải kết nối với ChromeDriver.exe.

----------------

	Bước 02: khai báo thư viện lập trình WebDriver tương ứng với trình duyệt đang sử dụng vào trong code.

		Khi đưa WebDriver vào trong code bằng cách tải thư viện lập trình thì lúc này cả trình duyệt (nhờ WebDriver đại diện) được xem là một đối tượng (object), được tải về máy và chiếm bộ nhớ trong RAM, ta có thể thoải mái gọi hàm để điều khiển/yêu cầu trình duyệt thực hiện các thao tác một cách tự động.

----------------

	Bước 03: sử dụng đối tượng đại diện trong trình duyệt (ví dụ: trinh_dieu_khien_trinh_duyet) để tìm/định vị các phần tử website.

		Mỗi thành phần/thẻ xuất hiện trong cây DOM trên website (web element/web control/tag/component) khi này đều được xem là đối tượng vì nó có giá trị (id, name, color, type,...).

			Ví dụ: thẻ <div>, <h>, <span>,...
				-> Đều được xem là đối tượng vì có mô tả, đặc tính và hành vi.

Vì đã là một đối tượng nên ta hoàn toàn có thể nhờ trình duyệt tìm giúp ta các thẻ nào đó, khi đó ta sẽ tham chiếu đến thẻ tìm thấy qua loại dữ liệu WebElement (input, button, radio button, checkbox...).

Có nhiều cách để tìm thẻ: id, name, class, đường dẫn đến thẻ (XPath)
						<html>
						<body>
							<div>

	Ví dụ 1: trinh_dieu_khien_trinh_duyet.get('https://www.google.com/')
	Ví dụ 2: trinh_dieu_khien_trinh_duyet.find_element(By.NAME, 'q')

(Lưu ý: Khi lập trình sự kiện nhấn một nút trên trình duyệt, hãy sử dụng hàm Submit() khi nút bấm đó là nút bấm thật sự nằm trong form, và sử dụng hàm Click() khi nút bấm đó chỉ là label được chèn hyperlink.)

========================================================================

[ĐỊNH NGHĨA VỀ LOCATOR AND SELECTOR]

Khi W3C chuẩn hoá HTML, họ đã đưa ra những kỹ thuật để định vị các thẻ (tag) trong website, kỹ thuật để tìm ra/xác định/chỉ định một thẻ/phần tử (web element) nào đó tại vị trí nào đó trong hàng nghìn thẻ/phần tử khác.
	-> Kỹ thuật Selector (CSS Selector, XPath,...) - kỹ thuật định vị một thẻ/phần tử (web element) bất kỳ trong website.

------------------------------

XPath: tìm duyệt/định vị thẻ một cách tương đối trong website (web element locator).
	-> Lần mò theo cây DOM của webiste.

Dựa trên ngôn ngữ XML (bố của HTML), mô tả theo cặp thẻ và đánh dấu ý nghĩa của từng cặp thẻ (Markup Language).

	Ví dụ:
		<div> - Division: phân vùng
		<span> - Span
		<b> - Bold
		<i> - Italic
		<u> - Underline

------------------------------

CSS Selector: dấu chấm đại diện cho class, dấu thăng đại diện cho các thuộc tính bên trong.

========================================================================

[SỬ DỤNG WAIT TRONG KIỂM THỬ TỰ ĐỘNG]

Trong quá trình thao tác (thường là chuyển trang), do đây là hai luồng (thread) riêng biệt nên cần sử dụng thêm wait để đợi trang kế tiếp trả về phần từ, vì trong nhiều trường hợp trang kế chưa kịp tải nên các phần tử sẽ chưa kịp xuất hiện.
	-> Sử dụng wait khi code chạy nhanh hơn việc trang được nạp.

========================================================================

[SỬ DỤNG IDE ĐỂ THIẾT KẾ KỊCH BẢN KIỂM THỬ TỰ ĐỘNG]

** Sử dụng công cụ để ghi hình lại các bước dạng kịch bản (Record & Replay/Playback):


========================================================================

[XÁC MINH TRONG SELENIUM IDE VỚI ASSERT VÀ VERIFY]

* Assert: dừng việc test ngay khi có Test Case trả về kết quả fail để có thể điều tra và fix lỗi này ngay, tất cả các Test Case còn lại chưa được chạy đều sẽ bị dừng lại.

------------------------------

* Verify (Soft Assert): vẫn tiếp tục thực hiện kiểm thử tất cả các Test Case khác dù có Test Case trả về kết quả fail, ta sẽ nhận được danh sách kết quả sau khi tất cả các Test Case thực hiện xong bằng cách gọi hàm assertAll().

========================================================================






